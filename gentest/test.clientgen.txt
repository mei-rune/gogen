// Please don't edit this file!
package main

import (
	"context"
	"database/sql"
	"io"
	"net/http"
	"strconv"
	"time"

	"github.com/runner-mei/gogen/gentest/models"
	"github.com/runner-mei/resty"
)

// TimeRange is skipped
// TimeRange2 is skipped
// QueryArgs is skipped

type TestClient struct {
	Proxy *resty.Proxy
}

func (client TestClient) GetAllFiles(ctx context.Context) ([]string, int64, error) {
	var result struct {
		Elist  []string `json:"list"`
		Etotal int64    `json:"total"`
	}

	request := resty.NewRequest(client.Proxy, "/allfiles").
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)

	if err != nil {
		return nil, 0, err
	}
	return result.Elist, result.Etotal, nil
}

func (client TestClient) TestByKey(ctx context.Context, key Key) error {
	request := resty.NewRequest(client.Proxy, "/test_by_key").
		SetParam("key", strconv.FormatInt(int64(key), 10))

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client TestClient) TestInt64Path(ctx context.Context, id int64) error {
	request := resty.NewRequest(client.Proxy, "/test64/"+strconv.FormatInt(id, 10)+"")

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client TestClient) TestInt64Query(ctx context.Context, id int64) error {
	request := resty.NewRequest(client.Proxy, "/test64").
		SetParam("id", strconv.FormatInt(id, 10))

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client TestClient) TestQueryArgs1(ctx context.Context, id int64, args QueryArgs) error {
	request := resty.NewRequest(client.Proxy, "/test_query_args1/"+strconv.FormatInt(id, 10)+"").
		SetParam("args.fint", strconv.FormatInt(int64(args.fint), 10)).
		SetParam("args.fstring", args.fstring).
		SetParam("args.ftime", args.ftime.Format(client.Proxy.TimeFormat))
	if args.fintptr != nil {
		request = request.SetParam("args.fintptr", strconv.FormatInt(int64(*args.fintptr), 10))
	}
	if args.fstringptr != nil {
		request = request.SetParam("args.fstringptr", *args.fstringptr)
	}
	if args.ftimeptr != nil {
		request = request.SetParam("args.ftimeptr", args.ftimeptr.Format(client.Proxy.TimeFormat))
	}

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client TestClient) TestQueryArgs2(ctx context.Context, id int64, args *QueryArgs) error {
	request := resty.NewRequest(client.Proxy, "/test_query_args2/"+strconv.FormatInt(id, 10)+"")
	if args != nil {
		request = request.SetParam("args.fint", strconv.FormatInt(int64(args.fint), 10)).
			SetParam("args.fstring", args.fstring).
			SetParam("args.ftime", args.ftime.Format(client.Proxy.TimeFormat))
		if args.fintptr != nil {
			request = request.SetParam("args.fintptr", strconv.FormatInt(int64(*args.fintptr), 10))
		}
		if args.fstringptr != nil {
			request = request.SetParam("args.fstringptr", *args.fstringptr)
		}
		if args.ftimeptr != nil {
			request = request.SetParam("args.ftimeptr", args.ftimeptr.Format(client.Proxy.TimeFormat))
		}
	}

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client TestClient) TestQueryArgs3(ctx context.Context, id int64, args QueryArgs) error {
	request := resty.NewRequest(client.Proxy, "/test_query_args3/"+strconv.FormatInt(id, 10)+"").
		SetParam("fint", strconv.FormatInt(int64(args.fint), 10)).
		SetParam("fstring", args.fstring).
		SetParam("ftime", args.ftime.Format(client.Proxy.TimeFormat))
	if args.fintptr != nil {
		request = request.SetParam("fintptr", strconv.FormatInt(int64(*args.fintptr), 10))
	}
	if args.fstringptr != nil {
		request = request.SetParam("fstringptr", *args.fstringptr)
	}
	if args.ftimeptr != nil {
		request = request.SetParam("ftimeptr", args.ftimeptr.Format(client.Proxy.TimeFormat))
	}

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client TestClient) TestQueryArgs4(ctx context.Context, id int64, args *QueryArgs) error {
	request := resty.NewRequest(client.Proxy, "/test_query_args4/"+strconv.FormatInt(id, 10)+"")
	if args != nil {
		request = request.SetParam("fint", strconv.FormatInt(int64(args.fint), 10)).
			SetParam("fstring", args.fstring).
			SetParam("ftime", args.ftime.Format(client.Proxy.TimeFormat))
		if args.fintptr != nil {
			request = request.SetParam("fintptr", strconv.FormatInt(int64(*args.fintptr), 10))
		}
		if args.fstringptr != nil {
			request = request.SetParam("fstringptr", *args.fstringptr)
		}
		if args.ftimeptr != nil {
			request = request.SetParam("ftimeptr", args.ftimeptr.Format(client.Proxy.TimeFormat))
		}
	}

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client TestClient) Ping(ctx context.Context) error {
	request := resty.NewRequest(client.Proxy, "/ping")

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client TestClient) Echo(ctx context.Context, a string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/echo").
		SetParam("a", a).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) EchoBody(ctx context.Context, body io.Reader) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/echo2").
		SetBody(body).
		Result(&result)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Echo3(ctx context.Context, a string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/echo3").
		SetBody(map[string]interface{}{
			"a": a,
		}).
		Result(&result)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Concat(ctx context.Context, a string, b string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/concat").
		SetParam("a", a).
		SetParam("b", b).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Concat1(ctx context.Context, a *string, b *string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/concat1")
	if a != nil {
		request = request.SetParam("a", *a)
	}
	if b != nil {
		request = request.SetParam("b", *b)
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Concat2(ctx context.Context, a string, b string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/concat2/"+a+"/"+b+"").
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Concat3(ctx context.Context, a *string, b *string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/concat3/"+*a+"/"+*b+"").
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Sub(ctx context.Context, a string, start int64) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/sub").
		SetParam("a", a).
		SetParam("start", strconv.FormatInt(start, 10)).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Save(ctx context.Context, a string, b string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/save/"+a+"").
		SetBody(b).
		Result(&result)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Save2(ctx context.Context, a *string, b *string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/save2/"+*a+"").
		SetBody(b).
		Result(&result)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Save3(ctx context.Context, a *string, b *string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/save3").
		SetBody(map[string]interface{}{
			"a": a,
			"b": b,
		}).
		Result(&result)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Save4(ctx context.Context, a string, b string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/save4").
		SetBody(map[string]interface{}{
			"a": a,
			"b": b,
		}).
		Result(&result)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Save5(ctx context.Context, a string, b string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/save5").
		SetBody(map[string]interface{}{
			"a": a,
			"b": b,
		}).
		Result(&result)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Add(ctx context.Context, a int, b int) (int, error) {
	var result int

	request := resty.NewRequest(client.Proxy, "/add/"+strconv.FormatInt(int64(a), 10)+"/"+strconv.FormatInt(int64(b), 10)+"").
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Add2(ctx context.Context, a *int, b *int) (int, error) {
	var result int

	request := resty.NewRequest(client.Proxy, "/add2/"+strconv.FormatInt(int64(*a), 10)+"/"+strconv.FormatInt(int64(*b), 10)+"").
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Add3(ctx context.Context, a *int, b *int) (int, error) {
	var result int

	request := resty.NewRequest(client.Proxy, "/add3")
	if a != nil {
		request = request.SetParam("a", strconv.FormatInt(int64(*a), 10))
	}
	if b != nil {
		request = request.SetParam("b", strconv.FormatInt(int64(*b), 10))
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Query1(ctx context.Context, a string, beginAt time.Time, endAt time.Time, isRaw bool) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/query1").
		SetParam("a", a).
		SetParam("begin_at", beginAt.Format(client.Proxy.TimeFormat)).
		SetParam("end_at", endAt.Format(client.Proxy.TimeFormat)).
		SetParam("is_raw", BoolToString(isRaw)).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Query2(ctx context.Context, a string, beginAt time.Time, endAt time.Time, isRaw bool) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/query2/"+BoolToString(isRaw)+"").
		SetParam("a", a).
		SetParam("begin_at", beginAt.Format(client.Proxy.TimeFormat)).
		SetParam("end_at", endAt.Format(client.Proxy.TimeFormat)).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Query3(ctx context.Context, a string, beginAt time.Time, endAt time.Time, isRaw *bool) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/query3/"+BoolToString(*isRaw)+"").
		SetParam("a", a).
		SetParam("begin_at", beginAt.Format(client.Proxy.TimeFormat)).
		SetParam("end_at", endAt.Format(client.Proxy.TimeFormat)).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Query4(ctx context.Context, a string, createdAt TimeRange, isRaw *bool) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/query4/"+BoolToString(*isRaw)+"").
		SetParam("a", a).
		SetParam("created_at.start", createdAt.Start.Format(client.Proxy.TimeFormat)).
		SetParam("created_at.end", createdAt.End.Format(client.Proxy.TimeFormat)).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Query5(ctx context.Context, a string, createdAt *TimeRange, isRaw *bool) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/query5/"+BoolToString(*isRaw)+"").
		SetParam("a", a)
	if createdAt != nil {
		request = request.SetParam("created_at.start", createdAt.Start.Format(client.Proxy.TimeFormat)).
			SetParam("created_at.end", createdAt.End.Format(client.Proxy.TimeFormat))
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Query6(ctx context.Context, a string, createdAt TimeRange2, isRaw *bool) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/query6/"+BoolToString(*isRaw)+"").
		SetParam("a", a)
	if createdAt.Start != nil {
		request = request.SetParam("created_at.start", createdAt.Start.Format(client.Proxy.TimeFormat))
	}
	if createdAt.End != nil {
		request = request.SetParam("created_at.end", createdAt.End.Format(client.Proxy.TimeFormat))
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Query7(ctx context.Context, a string, createdAt *TimeRange2, isRaw *bool) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/query7/"+BoolToString(*isRaw)+"").
		SetParam("a", a)
	if createdAt != nil {
		if createdAt.Start != nil {
			request = request.SetParam("created_at.start", createdAt.Start.Format(client.Proxy.TimeFormat))
		}
		if createdAt.End != nil {
			request = request.SetParam("created_at.end", createdAt.End.Format(client.Proxy.TimeFormat))
		}
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Query8(ctx context.Context, itemID int64) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/query8").
		SetParam("item_id", strconv.FormatInt(itemID, 10)).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Create3(ctx context.Context, _request *http.Request, response http.ResponseWriter) error {
	request := resty.NewRequest(client.Proxy, "/").
		SetBody(map[string]interface{}{
			"request":  _request,
			"response": response,
		})

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.POST(ctx)
}

func (client TestClient) Query9(ctx context.Context, itemID sql.NullInt64) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/query9")
	if itemID.Valid {
		request = request.SetParam("item_id", strconv.FormatInt(itemID.Int64, 10))
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Query10(ctx context.Context, itemID sql.NullString) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/query10")
	if itemID.Valid {
		request = request.SetParam("item_id", itemID.String)
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client TestClient) Query11(ctx context.Context, itemID sql.NullBool) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/query11")
	if itemID.Valid {
		request = request.SetParam("item_id", BoolToString(itemID.Bool))
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

// Misc: annotation is missing

type StringSvcImplClient struct {
	Proxy *resty.Proxy
}

func (client StringSvcImplClient) TestByKey(ctx context.Context, key Key) error {
	request := resty.NewRequest(client.Proxy, "/test_by_key").
		SetParam("key", strconv.FormatInt(int64(key), 10))

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client StringSvcImplClient) GetAllFiles(ctx context.Context) ([]string, int64, error) {
	var result struct {
		Elist  []string `json:"list"`
		Etotal int64    `json:"total"`
	}

	request := resty.NewRequest(client.Proxy, "/allfiles").
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)

	if err != nil {
		return nil, 0, err
	}
	return result.Elist, result.Etotal, nil
}

func (client StringSvcImplClient) TestInt64Path(ctx context.Context, id int64) error {
	request := resty.NewRequest(client.Proxy, "/test64/"+strconv.FormatInt(id, 10)+"")

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client StringSvcImplClient) TestInt64Query(ctx context.Context, id int64) error {
	request := resty.NewRequest(client.Proxy, "/test64").
		SetParam("id", strconv.FormatInt(id, 10))

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client StringSvcImplClient) TestQueryArgs1(ctx context.Context, id int64, args QueryArgs) error {
	request := resty.NewRequest(client.Proxy, "/test_query_args1/"+strconv.FormatInt(id, 10)+"").
		SetParam("args.fint", strconv.FormatInt(int64(args.fint), 10)).
		SetParam("args.fstring", args.fstring).
		SetParam("args.ftime", args.ftime.Format(client.Proxy.TimeFormat))
	if args.fintptr != nil {
		request = request.SetParam("args.fintptr", strconv.FormatInt(int64(*args.fintptr), 10))
	}
	if args.fstringptr != nil {
		request = request.SetParam("args.fstringptr", *args.fstringptr)
	}
	if args.ftimeptr != nil {
		request = request.SetParam("args.ftimeptr", args.ftimeptr.Format(client.Proxy.TimeFormat))
	}

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client StringSvcImplClient) TestQueryArgs2(ctx context.Context, id int64, args *QueryArgs) error {
	request := resty.NewRequest(client.Proxy, "/test_query_args2/"+strconv.FormatInt(id, 10)+"")
	if args != nil {
		request = request.SetParam("args.fint", strconv.FormatInt(int64(args.fint), 10)).
			SetParam("args.fstring", args.fstring).
			SetParam("args.ftime", args.ftime.Format(client.Proxy.TimeFormat))
		if args.fintptr != nil {
			request = request.SetParam("args.fintptr", strconv.FormatInt(int64(*args.fintptr), 10))
		}
		if args.fstringptr != nil {
			request = request.SetParam("args.fstringptr", *args.fstringptr)
		}
		if args.ftimeptr != nil {
			request = request.SetParam("args.ftimeptr", args.ftimeptr.Format(client.Proxy.TimeFormat))
		}
	}

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client StringSvcImplClient) TestQueryArgs3(ctx context.Context, id int64, args QueryArgs) error {
	request := resty.NewRequest(client.Proxy, "/test_query_args3/"+strconv.FormatInt(id, 10)+"").
		SetParam("fint", strconv.FormatInt(int64(args.fint), 10)).
		SetParam("fstring", args.fstring).
		SetParam("ftime", args.ftime.Format(client.Proxy.TimeFormat))
	if args.fintptr != nil {
		request = request.SetParam("fintptr", strconv.FormatInt(int64(*args.fintptr), 10))
	}
	if args.fstringptr != nil {
		request = request.SetParam("fstringptr", *args.fstringptr)
	}
	if args.ftimeptr != nil {
		request = request.SetParam("ftimeptr", args.ftimeptr.Format(client.Proxy.TimeFormat))
	}

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client StringSvcImplClient) TestQueryArgs4(ctx context.Context, id int64, args *QueryArgs) error {
	request := resty.NewRequest(client.Proxy, "/test_query_args4/"+strconv.FormatInt(id, 10)+"")
	if args != nil {
		request = request.SetParam("fint", strconv.FormatInt(int64(args.fint), 10)).
			SetParam("fstring", args.fstring).
			SetParam("ftime", args.ftime.Format(client.Proxy.TimeFormat))
		if args.fintptr != nil {
			request = request.SetParam("fintptr", strconv.FormatInt(int64(*args.fintptr), 10))
		}
		if args.fstringptr != nil {
			request = request.SetParam("fstringptr", *args.fstringptr)
		}
		if args.ftimeptr != nil {
			request = request.SetParam("ftimeptr", args.ftimeptr.Format(client.Proxy.TimeFormat))
		}
	}

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client StringSvcImplClient) Ping(ctx context.Context) error {
	request := resty.NewRequest(client.Proxy, "/ping")

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client StringSvcImplClient) Echo(ctx context.Context, a string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/echo").
		SetParam("a", a).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) EchoBody(ctx context.Context, body io.Reader) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/echo_body1").
		SetBody(body).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Echo3(ctx context.Context, a string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/echo3").
		SetBody(map[string]interface{}{
			"a": a,
		}).
		Result(&result)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Concat(ctx context.Context, a string, b string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/concat").
		SetParam("a", a).
		SetParam("b", b).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Concat1(ctx context.Context, a *string, b *string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/concat1")
	if a != nil {
		request = request.SetParam("a", *a)
	}
	if b != nil {
		request = request.SetParam("b", *b)
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Concat2(ctx context.Context, a string, b string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/concat2/"+a+"/"+b+"").
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Concat3(ctx context.Context, a *string, b *string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/concat3/"+*a+"/"+*b+"").
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Sub(ctx context.Context, a string, start int64) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/sub").
		SetParam("a", a).
		SetParam("start", strconv.FormatInt(start, 10)).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Save(ctx context.Context, a string, b string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/save/"+a+"").
		SetBody(b).
		Result(&result)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Save2(ctx context.Context, a *string, b *string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/save2/"+*a+"").
		SetBody(b).
		Result(&result)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Save3(ctx context.Context, a *string, b *string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/save3").
		SetBody(map[string]interface{}{
			"a": a,
			"b": b,
		}).
		Result(&result)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Save4(ctx context.Context, a string, b string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/save4").
		SetBody(map[string]interface{}{
			"a": a,
			"b": b,
		}).
		Result(&result)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Save5(ctx context.Context, a string, b string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/save5").
		SetBody(map[string]interface{}{
			"a": a,
			"b": b,
		}).
		Result(&result)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Add(ctx context.Context, a int, b int) (int, error) {
	var result int

	request := resty.NewRequest(client.Proxy, "/add/"+strconv.FormatInt(int64(a), 10)+"/"+strconv.FormatInt(int64(b), 10)+"").
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Add2(ctx context.Context, a *int, b *int) (int, error) {
	var result int

	request := resty.NewRequest(client.Proxy, "/add2/"+strconv.FormatInt(int64(*a), 10)+"/"+strconv.FormatInt(int64(*b), 10)+"").
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Add3(ctx context.Context, a *int, b *int) (int, error) {
	var result int

	request := resty.NewRequest(client.Proxy, "/add3")
	if a != nil {
		request = request.SetParam("a", strconv.FormatInt(int64(*a), 10))
	}
	if b != nil {
		request = request.SetParam("b", strconv.FormatInt(int64(*b), 10))
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Query1(ctx context.Context, a string, beginAt time.Time, endAt time.Time, isRaw bool) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/query1").
		SetParam("a", a).
		SetParam("begin_at", beginAt.Format(client.Proxy.TimeFormat)).
		SetParam("end_at", endAt.Format(client.Proxy.TimeFormat)).
		SetParam("is_raw", BoolToString(isRaw)).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Query2(ctx context.Context, a string, beginAt time.Time, endAt time.Time, isRaw bool) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/query2/"+BoolToString(isRaw)+"").
		SetParam("a", a).
		SetParam("begin_at", beginAt.Format(client.Proxy.TimeFormat)).
		SetParam("end_at", endAt.Format(client.Proxy.TimeFormat)).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Query3(ctx context.Context, a string, beginAt time.Time, endAt time.Time, isRaw *bool) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/query3/"+BoolToString(*isRaw)+"").
		SetParam("a", a).
		SetParam("begin_at", beginAt.Format(client.Proxy.TimeFormat)).
		SetParam("end_at", endAt.Format(client.Proxy.TimeFormat)).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Query4(ctx context.Context, a string, createdAt TimeRange, isRaw *bool) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/query4/"+BoolToString(*isRaw)+"").
		SetParam("a", a).
		SetParam("created_at.start", createdAt.Start.Format(client.Proxy.TimeFormat)).
		SetParam("created_at.end", createdAt.End.Format(client.Proxy.TimeFormat)).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Query5(ctx context.Context, a string, createdAt *TimeRange, isRaw *bool) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/query5/"+BoolToString(*isRaw)+"").
		SetParam("a", a)
	if createdAt != nil {
		request = request.SetParam("created_at.start", createdAt.Start.Format(client.Proxy.TimeFormat)).
			SetParam("created_at.end", createdAt.End.Format(client.Proxy.TimeFormat))
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Query6(ctx context.Context, a string, createdAt TimeRange2, isRaw *bool) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/query6/"+BoolToString(*isRaw)+"").
		SetParam("a", a)
	if createdAt.Start != nil {
		request = request.SetParam("created_at.start", createdAt.Start.Format(client.Proxy.TimeFormat))
	}
	if createdAt.End != nil {
		request = request.SetParam("created_at.end", createdAt.End.Format(client.Proxy.TimeFormat))
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcImplClient) Query7(ctx context.Context, a string, createdAt *TimeRange2, isRaw *bool) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/query7/"+BoolToString(*isRaw)+"").
		SetParam("a", a)
	if createdAt != nil {
		if createdAt.Start != nil {
			request = request.SetParam("created_at.start", createdAt.Start.Format(client.Proxy.TimeFormat))
		}
		if createdAt.End != nil {
			request = request.SetParam("created_at.end", createdAt.End.Format(client.Proxy.TimeFormat))
		}
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

// Misc: annotation is missing

type StringSvcWithContextClient struct {
	Proxy *resty.Proxy
}

func (client StringSvcWithContextClient) Echo(ctx context.Context, a string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/echo").
		SetParam("a", a).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcWithContextClient) EchoBody(ctx context.Context, body io.Reader) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/echo").
		SetBody(body).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcWithContextClient) Concat(ctx context.Context, a string, b string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/concat").
		SetParam("a", a).
		SetParam("b", b).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcWithContextClient) Concat1(ctx context.Context, a *string, b *string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/concat1")
	if a != nil {
		request = request.SetParam("a", *a)
	}
	if b != nil {
		request = request.SetParam("b", *b)
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcWithContextClient) Concat2(ctx context.Context, a string, b string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/concat2/"+a+"/"+b+"").
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcWithContextClient) Concat3(ctx context.Context, a *string, b *string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/concat3/"+*a+"/"+*b+"").
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcWithContextClient) Sub(ctx context.Context, a string, start int64) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/sub").
		SetParam("a", a).
		SetParam("start", strconv.FormatInt(start, 10)).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcWithContextClient) Save(ctx context.Context, a string, b string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/save/"+a+"").
		SetBody(b).
		Result(&result)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcWithContextClient) Save2(ctx context.Context, a *string, b *string) (string, error) {
	var result string

	request := resty.NewRequest(client.Proxy, "/save2/"+*a+"").
		SetBody(b).
		Result(&result)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcWithContextClient) Add(ctx context.Context, a int, b int) (int, error) {
	var result int

	request := resty.NewRequest(client.Proxy, "/add/"+strconv.FormatInt(int64(a), 10)+"/"+strconv.FormatInt(int64(b), 10)+"").
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcWithContextClient) Add2(ctx context.Context, a *int, b *int) (int, error) {
	var result int

	request := resty.NewRequest(client.Proxy, "/add2/"+strconv.FormatInt(int64(*a), 10)+"/"+strconv.FormatInt(int64(*b), 10)+"").
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client StringSvcWithContextClient) Add3(ctx context.Context, a *int, b *int) (int, error) {
	var result int

	request := resty.NewRequest(client.Proxy, "/add3")
	if a != nil {
		request = request.SetParam("a", strconv.FormatInt(int64(*a), 10))
	}
	if b != nil {
		request = request.SetParam("b", strconv.FormatInt(int64(*b), 10))
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

// Misc: annotation is missing

// AliasRequestQuery is skipped
// RequestQueryEx1 is skipped
// RequestQueryEx2 is skipped
// RequestQueryEx3 is skipped
// RequestQueryEx4 is skipped
// Sub1 is skipped
// Sub2 is skipped
// Sub3 is skipped
// SubTest1 is skipped
// SubTest2 is skipped
// SubTest3 is skipped
// SubTest4 is skipped

type RequestsClient struct {
	Proxy *resty.Proxy
}

func (client RequestsClient) Query1(ctx context.Context, query *models.RequestQuery, offset int64, limit int64, params map[string]string) ([]map[string]interface{}, error) {
	var result []map[string]interface{}

	request := resty.NewRequest(client.Proxy, "/query")
	if query != nil {
		request = request.SetParam("query.operator_id", strconv.FormatInt(query.OperatorID, 10)).
			SetParam("query.creator_id", strconv.FormatInt(query.CreatorID, 10)).
			SetParam("query.requester_id", strconv.FormatInt(query.RequesterID, 10))
		for idx := range query.RequestTypeIDs {
			request = request.AddParam("query.request_type_ids", strconv.FormatInt(query.RequestTypeIDs[idx], 10))
		}
		for idx := range query.RequestTypeNames {
			request = request.AddParam("query.request_type_names", query.RequestTypeNames[idx])
		}
		request = request.SetParam("query.name_like", query.NameLike).
			SetParam("query.current_status", strconv.FormatInt(query.CurrentStatus, 10))
		if query.IsUnclosed.Valid {
			request = request.SetParam("query.is_unclosed", BoolToString(query.IsUnclosed.Bool))
		}
		if query.IsOverdued.Valid {
			request = request.SetParam("query.is_overdued", BoolToString(query.IsOverdued.Bool))
		}
		if query.IsSuspend.Valid {
			request = request.SetParam("query.is_suspend", BoolToString(query.IsSuspend.Bool))
		}
		request = request.SetParam("query.start_at", query.StartAt.Format(client.Proxy.TimeFormat)).
			SetParam("query.end_at", query.EndAt.Format(client.Proxy.TimeFormat)).
			SetParam("query.overdue_start", query.OverdueStart.Format(client.Proxy.TimeFormat)).
			SetParam("query.overdue_end", query.OverdueEnd.Format(client.Proxy.TimeFormat)).
			SetParamValuesWithPrefix("query.settings.", query.Settings).
			SetParamValuesWithPrefix("query.ttargstt.", query.Args).
			SetParamsWithPrefix("query.", query.Values)
	}
	request = request.SetParam("offset", strconv.FormatInt(offset, 10)).
		SetParam("limit", strconv.FormatInt(limit, 10)).
		SetParamValues(params).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client RequestsClient) Query2(ctx context.Context, query *models.RequestQuery, offset int64, limit int64) ([]map[string]interface{}, error) {
	var result []map[string]interface{}

	request := resty.NewRequest(client.Proxy, "/query2")
	if query != nil {
		request = request.SetParam("operator_id", strconv.FormatInt(query.OperatorID, 10)).
			SetParam("creator_id", strconv.FormatInt(query.CreatorID, 10)).
			SetParam("requester_id", strconv.FormatInt(query.RequesterID, 10))
		for idx := range query.RequestTypeIDs {
			request = request.AddParam("request_type_ids", strconv.FormatInt(query.RequestTypeIDs[idx], 10))
		}
		for idx := range query.RequestTypeNames {
			request = request.AddParam("request_type_names", query.RequestTypeNames[idx])
		}
		request = request.SetParam("name_like", query.NameLike).
			SetParam("current_status", strconv.FormatInt(query.CurrentStatus, 10))
		if query.IsUnclosed.Valid {
			request = request.SetParam("is_unclosed", BoolToString(query.IsUnclosed.Bool))
		}
		if query.IsOverdued.Valid {
			request = request.SetParam("is_overdued", BoolToString(query.IsOverdued.Bool))
		}
		if query.IsSuspend.Valid {
			request = request.SetParam("is_suspend", BoolToString(query.IsSuspend.Bool))
		}
		request = request.SetParam("start_at", query.StartAt.Format(client.Proxy.TimeFormat)).
			SetParam("end_at", query.EndAt.Format(client.Proxy.TimeFormat)).
			SetParam("overdue_start", query.OverdueStart.Format(client.Proxy.TimeFormat)).
			SetParam("overdue_end", query.OverdueEnd.Format(client.Proxy.TimeFormat)).
			SetParamValuesWithPrefix("settings.", query.Settings).
			SetParamValuesWithPrefix("ttargstt.", query.Args).
			SetParams(query.Values)
	}
	request = request.SetParam("offset", strconv.FormatInt(offset, 10)).
		SetParam("limit", strconv.FormatInt(limit, 10)).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client RequestsClient) Query3(ctx context.Context, query *AliasRequestQuery, offset int64, limit int64) ([]map[string]interface{}, error) {
	var result []map[string]interface{}

	request := resty.NewRequest(client.Proxy, "/query3")
	if query != nil {
		request = request.SetParam("operator_id", strconv.FormatInt(query.OperatorID, 10)).
			SetParam("creator_id", strconv.FormatInt(query.CreatorID, 10)).
			SetParam("requester_id", strconv.FormatInt(query.RequesterID, 10))
		for idx := range query.RequestTypeIDs {
			request = request.AddParam("request_type_ids", strconv.FormatInt(query.RequestTypeIDs[idx], 10))
		}
		for idx := range query.RequestTypeNames {
			request = request.AddParam("request_type_names", query.RequestTypeNames[idx])
		}
		request = request.SetParam("name_like", query.NameLike).
			SetParam("current_status", strconv.FormatInt(query.CurrentStatus, 10))
		if query.IsUnclosed.Valid {
			request = request.SetParam("is_unclosed", BoolToString(query.IsUnclosed.Bool))
		}
		if query.IsOverdued.Valid {
			request = request.SetParam("is_overdued", BoolToString(query.IsOverdued.Bool))
		}
		if query.IsSuspend.Valid {
			request = request.SetParam("is_suspend", BoolToString(query.IsSuspend.Bool))
		}
		request = request.SetParam("start_at", query.StartAt.Format(client.Proxy.TimeFormat)).
			SetParam("end_at", query.EndAt.Format(client.Proxy.TimeFormat)).
			SetParam("overdue_start", query.OverdueStart.Format(client.Proxy.TimeFormat)).
			SetParam("overdue_end", query.OverdueEnd.Format(client.Proxy.TimeFormat)).
			SetParamValuesWithPrefix("settings.", query.Settings).
			SetParamValuesWithPrefix("ttargstt.", query.Args).
			SetParams(query.Values)
	}
	request = request.SetParam("offset", strconv.FormatInt(offset, 10)).
		SetParam("limit", strconv.FormatInt(limit, 10)).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client RequestsClient) QueryEx1(ctx context.Context, query *RequestQueryEx1, offset int64, limit int64, params map[string]string) ([]map[string]interface{}, error) {
	var result []map[string]interface{}

	request := resty.NewRequest(client.Proxy, "/queryex1")
	if query != nil {
		request = request.SetParam("query.operator_id", strconv.FormatInt(query.OperatorID, 10)).
			SetParam("query.creator_id", strconv.FormatInt(query.CreatorID, 10)).
			SetParam("query.requester_id", strconv.FormatInt(query.RequesterID, 10))
		for idx := range query.RequestTypeIDs {
			request = request.AddParam("query.request_type_ids", strconv.FormatInt(query.RequestTypeIDs[idx], 10))
		}
		for idx := range query.RequestTypeNames {
			request = request.AddParam("query.request_type_names", query.RequestTypeNames[idx])
		}
		request = request.SetParam("query.name_like", query.NameLike).
			SetParam("query.current_status", strconv.FormatInt(query.CurrentStatus, 10))
		if query.IsUnclosed.Valid {
			request = request.SetParam("query.is_unclosed", BoolToString(query.IsUnclosed.Bool))
		}
		if query.IsOverdued.Valid {
			request = request.SetParam("query.is_overdued", BoolToString(query.IsOverdued.Bool))
		}
		if query.IsSuspend.Valid {
			request = request.SetParam("query.is_suspend", BoolToString(query.IsSuspend.Bool))
		}
		request = request.SetParam("query.start_at", query.StartAt.Format(client.Proxy.TimeFormat)).
			SetParam("query.end_at", query.EndAt.Format(client.Proxy.TimeFormat)).
			SetParam("query.overdue_start", query.OverdueStart.Format(client.Proxy.TimeFormat)).
			SetParam("query.overdue_end", query.OverdueEnd.Format(client.Proxy.TimeFormat)).
			SetParamValuesWithPrefix("query.settings.", query.Settings).
			SetParamValuesWithPrefix("query.ttargstt.", query.Args).
			SetParamsWithPrefix("query.", query.Values).
			SetParam("query.ex_arg", query.ExArg)
	}
	request = request.SetParam("offset", strconv.FormatInt(offset, 10)).
		SetParam("limit", strconv.FormatInt(limit, 10)).
		SetParamValues(params).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client RequestsClient) QueryEx2(ctx context.Context, query *RequestQueryEx2, offset int64, limit int64, params map[string]string) ([]map[string]interface{}, error) {
	var result []map[string]interface{}

	request := resty.NewRequest(client.Proxy, "/queryex2")
	if query != nil {
		if query.RequestQuery != nil {
			request = request.SetParam("query.operator_id", strconv.FormatInt(query.OperatorID, 10)).
				SetParam("query.creator_id", strconv.FormatInt(query.CreatorID, 10)).
				SetParam("query.requester_id", strconv.FormatInt(query.RequesterID, 10))
			for idx := range query.RequestTypeIDs {
				request = request.AddParam("query.request_type_ids", strconv.FormatInt(query.RequestTypeIDs[idx], 10))
			}
			for idx := range query.RequestTypeNames {
				request = request.AddParam("query.request_type_names", query.RequestTypeNames[idx])
			}
			request = request.SetParam("query.name_like", query.NameLike).
				SetParam("query.current_status", strconv.FormatInt(query.CurrentStatus, 10))
			if query.IsUnclosed.Valid {
				request = request.SetParam("query.is_unclosed", BoolToString(query.IsUnclosed.Bool))
			}
			if query.IsOverdued.Valid {
				request = request.SetParam("query.is_overdued", BoolToString(query.IsOverdued.Bool))
			}
			if query.IsSuspend.Valid {
				request = request.SetParam("query.is_suspend", BoolToString(query.IsSuspend.Bool))
			}
			request = request.SetParam("query.start_at", query.StartAt.Format(client.Proxy.TimeFormat)).
				SetParam("query.end_at", query.EndAt.Format(client.Proxy.TimeFormat)).
				SetParam("query.overdue_start", query.OverdueStart.Format(client.Proxy.TimeFormat)).
				SetParam("query.overdue_end", query.OverdueEnd.Format(client.Proxy.TimeFormat)).
				SetParamValuesWithPrefix("query.settings.", query.Settings).
				SetParamValuesWithPrefix("query.ttargstt.", query.Args).
				SetParamsWithPrefix("query.", query.Values)
		}
		request = request.SetParam("query.ex_arg", query.ExArg)
	}
	request = request.SetParam("offset", strconv.FormatInt(offset, 10)).
		SetParam("limit", strconv.FormatInt(limit, 10)).
		SetParamValues(params).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client RequestsClient) QueryEx3(ctx context.Context, query *RequestQueryEx3, offset int64, limit int64, params map[string]string) ([]map[string]interface{}, error) {
	var result []map[string]interface{}

	request := resty.NewRequest(client.Proxy, "/queryex3")
	if query != nil {
		request = request.SetParam("query.request.operator_id", strconv.FormatInt(query.Request.OperatorID, 10)).
			SetParam("query.request.creator_id", strconv.FormatInt(query.Request.CreatorID, 10)).
			SetParam("query.request.requester_id", strconv.FormatInt(query.Request.RequesterID, 10))
		for idx := range query.Request.RequestTypeIDs {
			request = request.AddParam("query.request.request_type_ids", strconv.FormatInt(query.Request.RequestTypeIDs[idx], 10))
		}
		for idx := range query.Request.RequestTypeNames {
			request = request.AddParam("query.request.request_type_names", query.Request.RequestTypeNames[idx])
		}
		request = request.SetParam("query.request.name_like", query.Request.NameLike).
			SetParam("query.request.current_status", strconv.FormatInt(query.Request.CurrentStatus, 10))
		if query.Request.IsUnclosed.Valid {
			request = request.SetParam("query.request.is_unclosed", BoolToString(query.Request.IsUnclosed.Bool))
		}
		if query.Request.IsOverdued.Valid {
			request = request.SetParam("query.request.is_overdued", BoolToString(query.Request.IsOverdued.Bool))
		}
		if query.Request.IsSuspend.Valid {
			request = request.SetParam("query.request.is_suspend", BoolToString(query.Request.IsSuspend.Bool))
		}
		request = request.SetParam("query.request.start_at", query.Request.StartAt.Format(client.Proxy.TimeFormat)).
			SetParam("query.request.end_at", query.Request.EndAt.Format(client.Proxy.TimeFormat)).
			SetParam("query.request.overdue_start", query.Request.OverdueStart.Format(client.Proxy.TimeFormat)).
			SetParam("query.request.overdue_end", query.Request.OverdueEnd.Format(client.Proxy.TimeFormat)).
			SetParamValuesWithPrefix("query.request.settings.", query.Request.Settings).
			SetParamValuesWithPrefix("query.request.ttargstt.", query.Request.Args).
			SetParamsWithPrefix("query.request.", query.Request.Values).
			SetParam("query.ex_arg", query.ExArg)
	}
	request = request.SetParam("offset", strconv.FormatInt(offset, 10)).
		SetParam("limit", strconv.FormatInt(limit, 10)).
		SetParamValues(params).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client RequestsClient) QueryEx4(ctx context.Context, query *RequestQueryEx4, offset int64, limit int64, params map[string]string) ([]map[string]interface{}, error) {
	var result []map[string]interface{}

	request := resty.NewRequest(client.Proxy, "/queryex4")
	if query != nil {
		if query.Request != nil {
			request = request.SetParam("query.request.operator_id", strconv.FormatInt(query.Request.OperatorID, 10)).
				SetParam("query.request.creator_id", strconv.FormatInt(query.Request.CreatorID, 10)).
				SetParam("query.request.requester_id", strconv.FormatInt(query.Request.RequesterID, 10))
			for idx := range query.Request.RequestTypeIDs {
				request = request.AddParam("query.request.request_type_ids", strconv.FormatInt(query.Request.RequestTypeIDs[idx], 10))
			}
			for idx := range query.Request.RequestTypeNames {
				request = request.AddParam("query.request.request_type_names", query.Request.RequestTypeNames[idx])
			}
			request = request.SetParam("query.request.name_like", query.Request.NameLike).
				SetParam("query.request.current_status", strconv.FormatInt(query.Request.CurrentStatus, 10))
			if query.Request.IsUnclosed.Valid {
				request = request.SetParam("query.request.is_unclosed", BoolToString(query.Request.IsUnclosed.Bool))
			}
			if query.Request.IsOverdued.Valid {
				request = request.SetParam("query.request.is_overdued", BoolToString(query.Request.IsOverdued.Bool))
			}
			if query.Request.IsSuspend.Valid {
				request = request.SetParam("query.request.is_suspend", BoolToString(query.Request.IsSuspend.Bool))
			}
			request = request.SetParam("query.request.start_at", query.Request.StartAt.Format(client.Proxy.TimeFormat)).
				SetParam("query.request.end_at", query.Request.EndAt.Format(client.Proxy.TimeFormat)).
				SetParam("query.request.overdue_start", query.Request.OverdueStart.Format(client.Proxy.TimeFormat)).
				SetParam("query.request.overdue_end", query.Request.OverdueEnd.Format(client.Proxy.TimeFormat)).
				SetParamValuesWithPrefix("query.request.settings.", query.Request.Settings).
				SetParamValuesWithPrefix("query.request.ttargstt.", query.Request.Args).
				SetParamsWithPrefix("query.request.", query.Request.Values)
		}
		request = request.SetParam("query.ex_arg", query.ExArg)
	}
	request = request.SetParam("offset", strconv.FormatInt(offset, 10)).
		SetParam("limit", strconv.FormatInt(limit, 10)).
		SetParamValues(params).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client RequestsClient) QueryEx3NoPrefix(ctx context.Context, query *RequestQueryEx3, offset int64, limit int64, params map[string]string) ([]map[string]interface{}, error) {
	var result []map[string]interface{}

	request := resty.NewRequest(client.Proxy, "/queryex3/NoPrefix")
	if query != nil {
		request = request.SetParam("request.operator_id", strconv.FormatInt(query.Request.OperatorID, 10)).
			SetParam("request.creator_id", strconv.FormatInt(query.Request.CreatorID, 10)).
			SetParam("request.requester_id", strconv.FormatInt(query.Request.RequesterID, 10))
		for idx := range query.Request.RequestTypeIDs {
			request = request.AddParam("request.request_type_ids", strconv.FormatInt(query.Request.RequestTypeIDs[idx], 10))
		}
		for idx := range query.Request.RequestTypeNames {
			request = request.AddParam("request.request_type_names", query.Request.RequestTypeNames[idx])
		}
		request = request.SetParam("request.name_like", query.Request.NameLike).
			SetParam("request.current_status", strconv.FormatInt(query.Request.CurrentStatus, 10))
		if query.Request.IsUnclosed.Valid {
			request = request.SetParam("request.is_unclosed", BoolToString(query.Request.IsUnclosed.Bool))
		}
		if query.Request.IsOverdued.Valid {
			request = request.SetParam("request.is_overdued", BoolToString(query.Request.IsOverdued.Bool))
		}
		if query.Request.IsSuspend.Valid {
			request = request.SetParam("request.is_suspend", BoolToString(query.Request.IsSuspend.Bool))
		}
		request = request.SetParam("request.start_at", query.Request.StartAt.Format(client.Proxy.TimeFormat)).
			SetParam("request.end_at", query.Request.EndAt.Format(client.Proxy.TimeFormat)).
			SetParam("request.overdue_start", query.Request.OverdueStart.Format(client.Proxy.TimeFormat)).
			SetParam("request.overdue_end", query.Request.OverdueEnd.Format(client.Proxy.TimeFormat)).
			SetParamValuesWithPrefix("request.settings.", query.Request.Settings).
			SetParamValuesWithPrefix("request.ttargstt.", query.Request.Args).
			SetParamsWithPrefix("request.", query.Request.Values).
			SetParam("ex_arg", query.ExArg)
	}
	request = request.SetParam("offset", strconv.FormatInt(offset, 10)).
		SetParam("limit", strconv.FormatInt(limit, 10)).
		SetParamValues(params).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client RequestsClient) QueryEx4NoPrefix(ctx context.Context, query *RequestQueryEx4, offset int64, limit int64, params map[string]string) ([]map[string]interface{}, error) {
	var result []map[string]interface{}

	request := resty.NewRequest(client.Proxy, "/queryex4/NoPrefix")
	if query != nil {
		if query.Request != nil {
			request = request.SetParam("request.operator_id", strconv.FormatInt(query.Request.OperatorID, 10)).
				SetParam("request.creator_id", strconv.FormatInt(query.Request.CreatorID, 10)).
				SetParam("request.requester_id", strconv.FormatInt(query.Request.RequesterID, 10))
			for idx := range query.Request.RequestTypeIDs {
				request = request.AddParam("request.request_type_ids", strconv.FormatInt(query.Request.RequestTypeIDs[idx], 10))
			}
			for idx := range query.Request.RequestTypeNames {
				request = request.AddParam("request.request_type_names", query.Request.RequestTypeNames[idx])
			}
			request = request.SetParam("request.name_like", query.Request.NameLike).
				SetParam("request.current_status", strconv.FormatInt(query.Request.CurrentStatus, 10))
			if query.Request.IsUnclosed.Valid {
				request = request.SetParam("request.is_unclosed", BoolToString(query.Request.IsUnclosed.Bool))
			}
			if query.Request.IsOverdued.Valid {
				request = request.SetParam("request.is_overdued", BoolToString(query.Request.IsOverdued.Bool))
			}
			if query.Request.IsSuspend.Valid {
				request = request.SetParam("request.is_suspend", BoolToString(query.Request.IsSuspend.Bool))
			}
			request = request.SetParam("request.start_at", query.Request.StartAt.Format(client.Proxy.TimeFormat)).
				SetParam("request.end_at", query.Request.EndAt.Format(client.Proxy.TimeFormat)).
				SetParam("request.overdue_start", query.Request.OverdueStart.Format(client.Proxy.TimeFormat)).
				SetParam("request.overdue_end", query.Request.OverdueEnd.Format(client.Proxy.TimeFormat)).
				SetParamValuesWithPrefix("request.settings.", query.Request.Settings).
				SetParamValuesWithPrefix("request.ttargstt.", query.Request.Args).
				SetParamsWithPrefix("request.", query.Request.Values)
		}
		request = request.SetParam("ex_arg", query.ExArg)
	}
	request = request.SetParam("offset", strconv.FormatInt(offset, 10)).
		SetParam("limit", strconv.FormatInt(limit, 10)).
		SetParamValues(params).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client RequestsClient) List(ctx context.Context, query *models.RequestQuery, offset int64, limit int64) ([]map[string]interface{}, error) {
	var result []map[string]interface{}

	request := resty.NewRequest(client.Proxy, "/")
	if query != nil {
		request = request.SetParam("query.operator_id", strconv.FormatInt(query.OperatorID, 10)).
			SetParam("query.creator_id", strconv.FormatInt(query.CreatorID, 10)).
			SetParam("query.requester_id", strconv.FormatInt(query.RequesterID, 10))
		for idx := range query.RequestTypeIDs {
			request = request.AddParam("query.request_type_ids", strconv.FormatInt(query.RequestTypeIDs[idx], 10))
		}
		for idx := range query.RequestTypeNames {
			request = request.AddParam("query.request_type_names", query.RequestTypeNames[idx])
		}
		request = request.SetParam("query.name_like", query.NameLike).
			SetParam("query.current_status", strconv.FormatInt(query.CurrentStatus, 10))
		if query.IsUnclosed.Valid {
			request = request.SetParam("query.is_unclosed", BoolToString(query.IsUnclosed.Bool))
		}
		if query.IsOverdued.Valid {
			request = request.SetParam("query.is_overdued", BoolToString(query.IsOverdued.Bool))
		}
		if query.IsSuspend.Valid {
			request = request.SetParam("query.is_suspend", BoolToString(query.IsSuspend.Bool))
		}
		request = request.SetParam("query.start_at", query.StartAt.Format(client.Proxy.TimeFormat)).
			SetParam("query.end_at", query.EndAt.Format(client.Proxy.TimeFormat)).
			SetParam("query.overdue_start", query.OverdueStart.Format(client.Proxy.TimeFormat)).
			SetParam("query.overdue_end", query.OverdueEnd.Format(client.Proxy.TimeFormat)).
			SetParamValuesWithPrefix("query.settings.", query.Settings).
			SetParamValuesWithPrefix("query.ttargstt.", query.Args).
			SetParamsWithPrefix("query.", query.Values)
	}
	request = request.SetParam("offset", strconv.FormatInt(offset, 10)).
		SetParam("limit", strconv.FormatInt(limit, 10)).
		Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client RequestsClient) Create(ctx context.Context, data *models.Request) (int64, error) {
	var result int64

	request := resty.NewRequest(client.Proxy, "/").
		SetBody(data).
		Result(&result)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client RequestsClient) Create2(ctx context.Context, _request *models.Request, testarg int64) (int64, error) {
	var result int64

	request := resty.NewRequest(client.Proxy, "/").
		SetBody(map[string]interface{}{
			"request": _request,
			"testarg": testarg,
		}).
		Result(&result)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client RequestsClient) UpdateByID(ctx context.Context, id int64, data *models.Request) (int64, error) {
	var result int64

	request := resty.NewRequest(client.Proxy, "/"+strconv.FormatInt(id, 10)+"").
		SetBody(data).
		Result(&result)

	err := request.PUT(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client RequestsClient) Set1ByID(ctx context.Context, id int64, params map[string]string) error {
	request := resty.NewRequest(client.Proxy, "/"+strconv.FormatInt(id, 10)+"").
		SetBody(map[string]interface{}{
			"params": params,
		})

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.PATCH(ctx)
}

func (client RequestsClient) Set2ByID(ctx context.Context, id int64, params map[string]string) error {
	request := resty.NewRequest(client.Proxy, "/"+strconv.FormatInt(id, 10)+"").
		SetBody(params)

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.PATCH(ctx)
}

func (client RequestsClient) Set3ByID(ctx context.Context, id int64, params map[string]string) error {
	request := resty.NewRequest(client.Proxy, "/"+strconv.FormatInt(id, 10)+"").
		SetBody(map[string]interface{}{
			"params": params,
		})

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.PUT(ctx)
}

func (client RequestsClient) Set4ByID(ctx context.Context, id int64, params map[string]string) error {
	request := resty.NewRequest(client.Proxy, "/"+strconv.FormatInt(id, 10)+"").
		SetBody(params)

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.PUT(ctx)
}

func (client RequestsClient) Set5ByID(ctx context.Context, id int64, params map[string]string) error {
	request := resty.NewRequest(client.Proxy, "/"+strconv.FormatInt(id, 10)+"/5").
		SetBody(map[string]interface{}{
			"params": params,
		})

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.POST(ctx)
}

func (client RequestsClient) Set6ByID(ctx context.Context, id int64, params map[string]string) error {
	request := resty.NewRequest(client.Proxy, "/"+strconv.FormatInt(id, 10)+"/6").
		SetBody(params)

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.POST(ctx)
}

func (client RequestsClient) Set7ByID(ctx context.Context, id int64, params interface{}) error {
	request := resty.NewRequest(client.Proxy, "/"+strconv.FormatInt(id, 10)+"/7").
		SetBody(params)

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.POST(ctx)
}

func (client RequestsClient) QuerySubTest1(ctx context.Context, query *SubTest1) ([]map[string]interface{}, error) {
	var result []map[string]interface{}

	request := resty.NewRequest(client.Proxy, "/querysub1")
	if query != nil {
		request = request.SetParam("query.sub1.a1", query.Sub1.A1).
			SetParam("query.sub1.a2", query.Sub1.A2).
			SetParam("query.sub2.b1", query.Sub2.B1).
			SetParam("query.sub2.b2", query.Sub2.B2).
			SetParam("query.ex_arg", query.ExArg)
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client RequestsClient) QuerySubTest2(ctx context.Context, query *SubTest2) ([]map[string]interface{}, error) {
	var result []map[string]interface{}

	request := resty.NewRequest(client.Proxy, "/querysub2")
	if query != nil {
		if query.Sub1 != nil {
			request = request.SetParam("query.sub1.a1", query.Sub1.A1).
				SetParam("query.sub1.a2", query.Sub1.A2)
		}
		if query.Sub2 != nil {
			request = request.SetParam("query.sub2.b1", query.Sub2.B1).
				SetParam("query.sub2.b2", query.Sub2.B2)
		}
		request = request.SetParam("query.ex_arg", query.ExArg)
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client RequestsClient) QuerySubTest3(ctx context.Context, query *SubTest3) ([]map[string]interface{}, error) {
	var result []map[string]interface{}

	request := resty.NewRequest(client.Proxy, "/querysub3")
	if query != nil {
		if query.Sub1 != nil {
			request = request.SetParam("query.sub1.a1", query.Sub1.A1).
				SetParam("query.sub1.a2", query.Sub1.A2)
		}
		if query.Sub2 != nil {
			request = request.SetParam("query.sub2.b1", query.Sub2.B1).
				SetParam("query.sub2.b2", query.Sub2.B2)
		}
		request = request.SetParam("query.ex_arg", query.ExArg).
			SetParam("query.ex_arg", query.ExArg)
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}

func (client RequestsClient) QuerySubTest4(ctx context.Context, query *SubTest4) ([]map[string]interface{}, error) {
	var result []map[string]interface{}

	request := resty.NewRequest(client.Proxy, "/querysub4")
	if query != nil {
		if query.SubTest2 != nil {
			if query.Sub1 != nil {
				request = request.SetParam("query.sub1.a1", query.Sub1.A1).
					SetParam("query.sub1.a2", query.Sub1.A2)
			}
			if query.Sub2 != nil {
				request = request.SetParam("query.sub2.b1", query.Sub2.B1).
					SetParam("query.sub2.b2", query.Sub2.B2)
			}
			request = request.SetParam("query.ex_arg", query.ExArg)
		}
		request = request.SetParam("query.ex_arg", query.ExArg)
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	return result, err
}
