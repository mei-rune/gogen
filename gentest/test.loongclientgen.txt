// Please don't edit this file!
package main

import (
	"context"
	"errors"
	"io"
	"strconv"
	"time"

	"github.com/runner-mei/loong"
	"github.com/runner-mei/resty"
)

// TimeRange is skipped
// TimeRange2 is skipped

type TestClient struct {
	Proxy *resty.Proxy
}

func (client TestClient) GetAllFiles(ctx context.Context) ([]string, int64, error) {
	var result struct {
		Elist  []string `json:"list"`
		Etotal int64    `json:"total"`
	}
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/allfiles").
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)

	if err != nil {
		return nil, 0, err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return nil, 0, errors.New("error is nil!!! wrapper is missing?")
		}

		return nil, 0, resultWrap.Error
	}
	return result.Elist, result.Etotal, nil
}

func (client TestClient) TestByKey(ctx context.Context, key Key) error {
	request := resty.NewRequest(client.Proxy, "/ping").
		SetParam("key", strconv.FormatInt(int64(key), 10))

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client TestClient) TestInt64Path(ctx context.Context, id int64) error {
	request := resty.NewRequest(client.Proxy, "/test64/"+strconv.FormatInt(id, 10)+"")

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client TestClient) TestInt64Query(ctx context.Context, id int64) error {
	request := resty.NewRequest(client.Proxy, "/test64").
		SetParam("id", strconv.FormatInt(id, 10))

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client TestClient) Ping(ctx context.Context) error {
	request := resty.NewRequest(client.Proxy, "/ping")

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client TestClient) Echo(ctx context.Context, a string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/echo").
		SetParam("a", a).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) EchoBody(ctx context.Context, body io.Reader) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/echo").
		SetBody(body).
		Result(&resultWrap)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Concat(ctx context.Context, a string, b string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/concat").
		SetParam("a", a).
		SetParam("b", b).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Concat1(ctx context.Context, a *string, b *string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/concat1")
	if a != nil {
		request = request.SetParam("a", *a)
	}
	if b != nil {
		request = request.SetParam("b", *b)
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Concat2(ctx context.Context, a string, b string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/concat2/"+a+"/"+b+"").
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Concat3(ctx context.Context, a *string, b *string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/concat3/"+*a+"/"+*b+"").
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Sub(ctx context.Context, a string, start int64) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/sub").
		SetParam("a", a).
		SetParam("start", strconv.FormatInt(start, 10)).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Save(ctx context.Context, a string, b string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/save/"+a+"").
		SetBody(b).
		Result(&resultWrap)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Save2(ctx context.Context, a *string, b *string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/save2/"+*a+"").
		SetBody(b).
		Result(&resultWrap)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Save3(ctx context.Context, a *string, b *string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/save3").
		SetBody(map[string]interface{}{
			"a": a,
			"b": b,
		}).
		Result(&resultWrap)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Save4(ctx context.Context, a string, b string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/save4").
		SetBody(map[string]interface{}{
			"a": a,
			"b": b,
		}).
		Result(&resultWrap)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Save5(ctx context.Context, a string, b string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/save5").
		SetBody(map[string]interface{}{
			"a": a,
			"b": b,
		}).
		Result(&resultWrap)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Echo5(ctx context.Context, a string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/echo5").
		SetBody(map[string]interface{}{
			"a": a,
		}).
		Result(&resultWrap)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Add(ctx context.Context, a int, b int) (int, error) {
	var result int
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/add/"+strconv.FormatInt(int64(a), 10)+"/"+strconv.FormatInt(int64(b), 10)+"").
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return 0, err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return 0, errors.New("error is nil!!! wrapper is missing?")
		}
		return 0, resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Add2(ctx context.Context, a *int, b *int) (int, error) {
	var result int
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/add2/"+strconv.FormatInt(int64(*a), 10)+"/"+strconv.FormatInt(int64(*b), 10)+"").
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return 0, err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return 0, errors.New("error is nil!!! wrapper is missing?")
		}
		return 0, resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Add3(ctx context.Context, a *int, b *int) (int, error) {
	var result int
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/add3")
	if a != nil {
		request = request.SetParam("a", strconv.FormatInt(int64(*a), 10))
	}
	if b != nil {
		request = request.SetParam("b", strconv.FormatInt(int64(*b), 10))
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return 0, err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return 0, errors.New("error is nil!!! wrapper is missing?")
		}
		return 0, resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Query1(ctx context.Context, a string, beginAt time.Time, endAt time.Time, isRaw bool) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/query1").
		SetParam("a", a).
		SetParam("begin_at", beginAt.Format(client.Proxy.TimeFormat)).
		SetParam("end_at", endAt.Format(client.Proxy.TimeFormat)).
		SetParam("is_raw", BoolToString(isRaw)).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Query2(ctx context.Context, a string, beginAt time.Time, endAt time.Time, isRaw bool) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/query2/"+BoolToString(isRaw)+"").
		SetParam("a", a).
		SetParam("begin_at", beginAt.Format(client.Proxy.TimeFormat)).
		SetParam("end_at", endAt.Format(client.Proxy.TimeFormat)).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Query3(ctx context.Context, a string, beginAt time.Time, endAt time.Time, isRaw *bool) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/query3/"+BoolToString(*isRaw)+"").
		SetParam("a", a).
		SetParam("begin_at", beginAt.Format(client.Proxy.TimeFormat)).
		SetParam("end_at", endAt.Format(client.Proxy.TimeFormat)).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Query4(ctx context.Context, a string, createdAt TimeRange, isRaw *bool) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/query4/"+BoolToString(*isRaw)+"").
		SetParam("a", a).
		SetParam("created_at.start", createdAt.Start.Format(client.Proxy.TimeFormat)).
		SetParam("created_at.end", createdAt.End.Format(client.Proxy.TimeFormat)).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Query5(ctx context.Context, a string, createdAt *TimeRange, isRaw *bool) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/query5/"+BoolToString(*isRaw)+"").
		SetParam("a", a)
	if createdAt != nil {
		request = request.SetParam("created_at.start", createdAt.Start.Format(client.Proxy.TimeFormat)).
			SetParam("created_at.end", createdAt.End.Format(client.Proxy.TimeFormat))
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Query6(ctx context.Context, a string, createdAt TimeRange2, isRaw *bool) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/query6/"+BoolToString(*isRaw)+"").
		SetParam("a", a)
	if createdAt.Start != nil {
		request = request.SetParam("created_at.start", createdAt.Start.Format(client.Proxy.TimeFormat))
	}
	if createdAt.End != nil {
		request = request.SetParam("created_at.end", createdAt.End.Format(client.Proxy.TimeFormat))
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client TestClient) Query7(ctx context.Context, a string, createdAt *TimeRange2, isRaw *bool) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/query7/"+BoolToString(*isRaw)+"").
		SetParam("a", a)
	if createdAt != nil {
		if createdAt.Start != nil {
			request = request.SetParam("created_at.start", createdAt.Start.Format(client.Proxy.TimeFormat))
		}
		if createdAt.End != nil {
			request = request.SetParam("created_at.end", createdAt.End.Format(client.Proxy.TimeFormat))
		}
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

// Misc: annotation is missing

type StringSvcImplClient struct {
	Proxy *resty.Proxy
}

func (client StringSvcImplClient) GetAllFiles(ctx context.Context) ([]string, int64, error) {
	var result struct {
		Elist  []string `json:"list"`
		Etotal int64    `json:"total"`
	}
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/allfiles").
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)

	if err != nil {
		return nil, 0, err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return nil, 0, errors.New("error is nil!!! wrapper is missing?")
		}

		return nil, 0, resultWrap.Error
	}
	return result.Elist, result.Etotal, nil
}

func (client StringSvcImplClient) TestInt64Path(ctx context.Context, id int64) error {
	request := resty.NewRequest(client.Proxy, "/test64/"+strconv.FormatInt(id, 10)+"")

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client StringSvcImplClient) TestInt64Query(ctx context.Context, id int64) error {
	request := resty.NewRequest(client.Proxy, "/test64").
		SetParam("id", strconv.FormatInt(id, 10))

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client StringSvcImplClient) Ping(ctx context.Context) error {
	request := resty.NewRequest(client.Proxy, "/ping")

	defer resty.ReleaseRequest(client.Proxy, request)
	return request.GET(ctx)
}

func (client StringSvcImplClient) Echo(ctx context.Context, a string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/echo").
		SetParam("a", a).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) EchoBody(ctx context.Context, body io.Reader) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/echo_body").
		SetBody(body).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Concat(ctx context.Context, a string, b string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/concat").
		SetParam("a", a).
		SetParam("b", b).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Concat1(ctx context.Context, a *string, b *string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/concat1")
	if a != nil {
		request = request.SetParam("a", *a)
	}
	if b != nil {
		request = request.SetParam("b", *b)
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Concat2(ctx context.Context, a string, b string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/concat2/"+a+"/"+b+"").
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Concat3(ctx context.Context, a *string, b *string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/concat3/"+*a+"/"+*b+"").
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Sub(ctx context.Context, a string, start int64) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/sub").
		SetParam("a", a).
		SetParam("start", strconv.FormatInt(start, 10)).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Save(ctx context.Context, a string, b string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/save/"+a+"").
		SetBody(b).
		Result(&resultWrap)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Save2(ctx context.Context, a *string, b *string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/save2/"+*a+"").
		SetBody(b).
		Result(&resultWrap)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Save3(ctx context.Context, a *string, b *string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/save3").
		SetBody(map[string]interface{}{
			"a": a,
			"b": b,
		}).
		Result(&resultWrap)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Save4(ctx context.Context, a string, b string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/save4").
		SetBody(map[string]interface{}{
			"a": a,
			"b": b,
		}).
		Result(&resultWrap)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Add(ctx context.Context, a int, b int) (int, error) {
	var result int
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/add/"+strconv.FormatInt(int64(a), 10)+"/"+strconv.FormatInt(int64(b), 10)+"").
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return 0, err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return 0, errors.New("error is nil!!! wrapper is missing?")
		}
		return 0, resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Add2(ctx context.Context, a *int, b *int) (int, error) {
	var result int
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/add2/"+strconv.FormatInt(int64(*a), 10)+"/"+strconv.FormatInt(int64(*b), 10)+"").
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return 0, err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return 0, errors.New("error is nil!!! wrapper is missing?")
		}
		return 0, resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Add3(ctx context.Context, a *int, b *int) (int, error) {
	var result int
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/add3")
	if a != nil {
		request = request.SetParam("a", strconv.FormatInt(int64(*a), 10))
	}
	if b != nil {
		request = request.SetParam("b", strconv.FormatInt(int64(*b), 10))
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return 0, err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return 0, errors.New("error is nil!!! wrapper is missing?")
		}
		return 0, resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Query1(ctx context.Context, a string, beginAt time.Time, endAt time.Time, isRaw bool) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/query1").
		SetParam("a", a).
		SetParam("begin_at", beginAt.Format(client.Proxy.TimeFormat)).
		SetParam("end_at", endAt.Format(client.Proxy.TimeFormat)).
		SetParam("is_raw", BoolToString(isRaw)).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Query2(ctx context.Context, a string, beginAt time.Time, endAt time.Time, isRaw bool) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/query2/"+BoolToString(isRaw)+"").
		SetParam("a", a).
		SetParam("begin_at", beginAt.Format(client.Proxy.TimeFormat)).
		SetParam("end_at", endAt.Format(client.Proxy.TimeFormat)).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Query3(ctx context.Context, a string, beginAt time.Time, endAt time.Time, isRaw *bool) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/query3/"+BoolToString(*isRaw)+"").
		SetParam("a", a).
		SetParam("begin_at", beginAt.Format(client.Proxy.TimeFormat)).
		SetParam("end_at", endAt.Format(client.Proxy.TimeFormat)).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Query4(ctx context.Context, a string, createdAt TimeRange, isRaw *bool) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/query4/"+BoolToString(*isRaw)+"").
		SetParam("a", a).
		SetParam("created_at.start", createdAt.Start.Format(client.Proxy.TimeFormat)).
		SetParam("created_at.end", createdAt.End.Format(client.Proxy.TimeFormat)).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Query5(ctx context.Context, a string, createdAt *TimeRange, isRaw *bool) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/query5/"+BoolToString(*isRaw)+"").
		SetParam("a", a)
	if createdAt != nil {
		request = request.SetParam("created_at.start", createdAt.Start.Format(client.Proxy.TimeFormat)).
			SetParam("created_at.end", createdAt.End.Format(client.Proxy.TimeFormat))
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Query6(ctx context.Context, a string, createdAt TimeRange2, isRaw *bool) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/query6/"+BoolToString(*isRaw)+"").
		SetParam("a", a)
	if createdAt.Start != nil {
		request = request.SetParam("created_at.start", createdAt.Start.Format(client.Proxy.TimeFormat))
	}
	if createdAt.End != nil {
		request = request.SetParam("created_at.end", createdAt.End.Format(client.Proxy.TimeFormat))
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcImplClient) Query7(ctx context.Context, a string, createdAt *TimeRange2, isRaw *bool) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/query7/"+BoolToString(*isRaw)+"").
		SetParam("a", a)
	if createdAt != nil {
		if createdAt.Start != nil {
			request = request.SetParam("created_at.start", createdAt.Start.Format(client.Proxy.TimeFormat))
		}
		if createdAt.End != nil {
			request = request.SetParam("created_at.end", createdAt.End.Format(client.Proxy.TimeFormat))
		}
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

// Misc: annotation is missing

type StringSvcWithContextClient struct {
	Proxy *resty.Proxy
}

func (client StringSvcWithContextClient) Echo(ctx context.Context, a string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/echo").
		SetParam("a", a).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcWithContextClient) EchoBody(ctx context.Context, body io.Reader) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/echo").
		SetBody(body).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcWithContextClient) Concat(ctx context.Context, a string, b string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/concat").
		SetParam("a", a).
		SetParam("b", b).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcWithContextClient) Concat1(ctx context.Context, a *string, b *string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/concat1")
	if a != nil {
		request = request.SetParam("a", *a)
	}
	if b != nil {
		request = request.SetParam("b", *b)
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcWithContextClient) Concat2(ctx context.Context, a string, b string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/concat2/"+a+"/"+b+"").
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcWithContextClient) Concat3(ctx context.Context, a *string, b *string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/concat3/"+*a+"/"+*b+"").
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcWithContextClient) Sub(ctx context.Context, a string, start int64) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/sub").
		SetParam("a", a).
		SetParam("start", strconv.FormatInt(start, 10)).
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcWithContextClient) Save(ctx context.Context, a string, b string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/save/"+a+"").
		SetBody(b).
		Result(&resultWrap)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcWithContextClient) Save2(ctx context.Context, a *string, b *string) (string, error) {
	var result string
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/save2/"+*a+"").
		SetBody(b).
		Result(&resultWrap)

	err := request.POST(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return "", err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return "", errors.New("error is nil!!! wrapper is missing?")
		}
		return "", resultWrap.Error
	}
	return result, nil
}

func (client StringSvcWithContextClient) Add(ctx context.Context, a int, b int) (int, error) {
	var result int
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/add/"+strconv.FormatInt(int64(a), 10)+"/"+strconv.FormatInt(int64(b), 10)+"").
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return 0, err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return 0, errors.New("error is nil!!! wrapper is missing?")
		}
		return 0, resultWrap.Error
	}
	return result, nil
}

func (client StringSvcWithContextClient) Add2(ctx context.Context, a *int, b *int) (int, error) {
	var result int
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/add2/"+strconv.FormatInt(int64(*a), 10)+"/"+strconv.FormatInt(int64(*b), 10)+"").
		Result(&resultWrap)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return 0, err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return 0, errors.New("error is nil!!! wrapper is missing?")
		}
		return 0, resultWrap.Error
	}
	return result, nil
}

func (client StringSvcWithContextClient) Add3(ctx context.Context, a *int, b *int) (int, error) {
	var result int
	var resultWrap loong.Result
	resultWrap.Data = &result

	request := resty.NewRequest(client.Proxy, "/add3")
	if a != nil {
		request = request.SetParam("a", strconv.FormatInt(int64(*a), 10))
	}
	if b != nil {
		request = request.SetParam("b", strconv.FormatInt(int64(*b), 10))
	}
	request = request.Result(&result)

	err := request.GET(ctx)
	resty.ReleaseRequest(client.Proxy, request)
	if err != nil {
		return 0, err
	}
	if !resultWrap.Success {
		if resultWrap.Error == nil {
			return 0, errors.New("error is nil!!! wrapper is missing?")
		}
		return 0, resultWrap.Error
	}
	return result, nil
}

// Misc: annotation is missing
