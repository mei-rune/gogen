// Please don't edit this file!
package gentest

import (
	"errors"
	"strconv"

	"github.com/labstack/echo"
)

func InitStringSvc(mux *echo.Group, svc StringSvc) {
	mux.GET("/concat", func(ctx echo.Context) error {
		var a = ctx.QueryParam("a")
		var b = ctx.QueryParam("b")

		result, err := svc.Concat(a, b)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})
	mux.GET("/concat1", func(ctx echo.Context) error {
		var a *string
		if s := ctx.QueryParam("a"); s != "" {
			a = &s
		}
		var b *string
		if s := ctx.QueryParam("b"); s != "" {
			b = &s
		}

		result, err := svc.Concat1(a, b)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})
	mux.GET("/concat2/:a/:b", func(ctx echo.Context) error {
		var a = ctx.Param("a")
		var b = ctx.Param("b")

		result, err := svc.Concat2(a, b)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})
	mux.GET("/concat3/:a/:b", func(ctx echo.Context) error {
		var a *string
		if s := ctx.Param("a"); s != "" {
			a = &s
		}
		var b *string
		if s := ctx.Param("b"); s != "" {
			b = &s
		}

		result, err := svc.Concat3(a, b)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})
	mux.GET("/sub", func(ctx echo.Context) error {
		var a = ctx.QueryParam("a")
		var start int64
		if s := ctx.QueryParam("start"); s != "" {
			if v64, err := strconv.ParseInt(s, 10, 64); err != nil {
				ctx.Error(errors.New("argument %q is invalid - %q", start, s, err))
				return nil
			}
			start = v64
		}

		result, err := svc.Sub(a, start)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})
	mux.POST("/save/:a", func(ctx echo.Context) error {
		var a = ctx.Param("a")
		var b string
		if err := ctx.Bind(&b); err != nil {
			ctx.Error(errors.New("argument %q is invalid - %q", b, s, err))
			return nil
		}

		result, err := svc.Save(a, b)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})
	mux.POST("/save2/:a", func(ctx echo.Context) error {
		var a *string
		if s := ctx.Param("a"); s != "" {
			a = &s
		}
		var b *string
		if err := ctx.Bind(&b); err != nil {
			ctx.Error(errors.New("argument %q is invalid - %q", b, s, err))
			return nil
		}

		result, err := svc.Save2(a, b)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})
	mux.GET("/add/:a/:b", func(ctx echo.Context) error {
		var a int
		if s := ctx.Param("a"); s != "" {
			if v64, err := strconv.ParseInt(s, 10, 64); err != nil {
				ctx.Error(errors.New("argument %q is invalid - %q", a, s, err))
				return nil
			}
			a = int(v64)
		}
		var b int
		if s := ctx.Param("b"); s != "" {
			if v64, err := strconv.ParseInt(s, 10, 64); err != nil {
				ctx.Error(errors.New("argument %q is invalid - %q", b, s, err))
				return nil
			}
			b = int(v64)
		}

		result, err := svc.Add(a, b)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})
	mux.GET("/add2/:a/:b", func(ctx echo.Context) error {
		var a *int
		if s := ctx.Param("a"); s != "" {
			if v64, err := strconv.ParseInt(s, 10, 64); err != nil {
				ctx.Error(errors.New("argument %q is invalid - %q", a, s, err))
				return nil
			}
			a = new(*int)
			*a = *int(v64)
		}
		var b *int
		if s := ctx.Param("b"); s != "" {
			if v64, err := strconv.ParseInt(s, 10, 64); err != nil {
				ctx.Error(errors.New("argument %q is invalid - %q", b, s, err))
				return nil
			}
			b = new(*int)
			*b = *int(v64)
		}

		result, err := svc.Add2(a, b)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})
	mux.GET("/add3", func(ctx echo.Context) error {
		var a *int
		if s := ctx.QueryParam("a"); s != "" {
			if v64, err := strconv.ParseInt(s, 10, 64); err != nil {
				ctx.Error(errors.New("argument %q is invalid - %q", a, s, err))
				return nil
			}
			a = new(*int)
			*a = *int(v64)
		}
		var b *int
		if s := ctx.QueryParam("b"); s != "" {
			if v64, err := strconv.ParseInt(s, 10, 64); err != nil {
				ctx.Error(errors.New("argument %q is invalid - %q", b, s, err))
				return nil
			}
			b = new(*int)
			*b = *int(v64)
		}

		result, err := svc.Add3(a, b)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})

	// Misc: annotation is missing

}

func InitStringSvcImpl(mux *echo.Group, svc *StringSvcImpl) {
	mux.GET("/concat", func(ctx echo.Context) error {
		var a = ctx.QueryParam("a")
		var b = ctx.QueryParam("b")

		result, err := svc.Concat(a, b)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})
	mux.GET("/concat1", func(ctx echo.Context) error {
		var a *string
		if s := ctx.QueryParam("a"); s != "" {
			a = &s
		}
		var b *string
		if s := ctx.QueryParam("b"); s != "" {
			b = &s
		}

		result, err := svc.Concat1(a, b)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})
	mux.GET("/concat2/:a/:b", func(ctx echo.Context) error {
		var a = ctx.Param("a")
		var b = ctx.Param("b")

		result, err := svc.Concat2(a, b)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})
	mux.GET("/concat3/:a/:b", func(ctx echo.Context) error {
		var a *string
		if s := ctx.Param("a"); s != "" {
			a = &s
		}
		var b *string
		if s := ctx.Param("b"); s != "" {
			b = &s
		}

		result, err := svc.Concat3(a, b)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})
	mux.GET("/sub", func(ctx echo.Context) error {
		var a = ctx.QueryParam("a")
		var start int64
		if s := ctx.QueryParam("start"); s != "" {
			if v64, err := strconv.ParseInt(s, 10, 64); err != nil {
				ctx.Error(errors.New("argument %q is invalid - %q", start, s, err))
				return nil
			}
			start = v64
		}

		result, err := svc.Sub(a, start)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})
	mux.POST("/save/:a", func(ctx echo.Context) error {
		var a = ctx.Param("a")
		var b string
		if err := ctx.Bind(&b); err != nil {
			ctx.Error(errors.New("argument %q is invalid - %q", b, s, err))
			return nil
		}

		result, err := svc.Save(a, b)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})
	mux.POST("/save2/:a", func(ctx echo.Context) error {
		var a *string
		if s := ctx.Param("a"); s != "" {
			a = &s
		}
		var b *string
		if err := ctx.Bind(&b); err != nil {
			ctx.Error(errors.New("argument %q is invalid - %q", b, s, err))
			return nil
		}

		result, err := svc.Save2(a, b)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})
	mux.GET("/add/:a/:b", func(ctx echo.Context) error {
		var a int
		if s := ctx.Param("a"); s != "" {
			if v64, err := strconv.ParseInt(s, 10, 64); err != nil {
				ctx.Error(errors.New("argument %q is invalid - %q", a, s, err))
				return nil
			}
			a = int(v64)
		}
		var b int
		if s := ctx.Param("b"); s != "" {
			if v64, err := strconv.ParseInt(s, 10, 64); err != nil {
				ctx.Error(errors.New("argument %q is invalid - %q", b, s, err))
				return nil
			}
			b = int(v64)
		}

		result, err := svc.Add(a, b)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})
	mux.GET("/add2/:a/:b", func(ctx echo.Context) error {
		var a *int
		if s := ctx.Param("a"); s != "" {
			if v64, err := strconv.ParseInt(s, 10, 64); err != nil {
				ctx.Error(errors.New("argument %q is invalid - %q", a, s, err))
				return nil
			}
			a = new(*int)
			*a = *int(v64)
		}
		var b *int
		if s := ctx.Param("b"); s != "" {
			if v64, err := strconv.ParseInt(s, 10, 64); err != nil {
				ctx.Error(errors.New("argument %q is invalid - %q", b, s, err))
				return nil
			}
			b = new(*int)
			*b = *int(v64)
		}

		result, err := svc.Add2(a, b)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})
	mux.GET("/add3", func(ctx echo.Context) error {
		var a *int
		if s := ctx.QueryParam("a"); s != "" {
			if v64, err := strconv.ParseInt(s, 10, 64); err != nil {
				ctx.Error(errors.New("argument %q is invalid - %q", a, s, err))
				return nil
			}
			a = new(*int)
			*a = *int(v64)
		}
		var b *int
		if s := ctx.QueryParam("b"); s != "" {
			if v64, err := strconv.ParseInt(s, 10, 64); err != nil {
				ctx.Error(errors.New("argument %q is invalid - %q", b, s, err))
				return nil
			}
			b = new(*int)
			*b = *int(v64)
		}

		result, err := svc.Add3(a, b)
		if err != nil {
			ctx.Error(err)
			return nil
		}
		return ctx.JSON(result)
	})

	// Misc: annotation is missing

}
