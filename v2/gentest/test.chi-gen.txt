//go:build chi
// +build chi

// Please don't edit this file!
package main

import (
	"net/http"
	"strconv"
	"time"

	"github.com/go-chi/chi"
	"github.com/go-chi/render"
)

// TimeRange is skipped
// TimeRange2 is skipped
// QueryArgs is skipped

func InitStringSvc(mux chi.Router, svc StringSvc) {
	mux.Get("/files", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var filenames = queryParams["filenames"]
		list, total, err := svc.GetFiles(filenames)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		result := map[string]interface{}{
			"list":  list,
			"total": total,
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/times", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var times []time.Time
		if ss := queryParams["times"]; len(ss) != 0 {
			timesValue, err := ToDatetimes(ss)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.GetTimes", "times"))
				return
			}
			times = timesValue
		}
		list, total, err := svc.GetTimes(times)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		result := map[string]interface{}{
			"list":  list,
			"total": total,
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/allfiles", func(w http.ResponseWriter, r *http.Request) {
		list, total, err := svc.GetAllFiles()
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		result := map[string]interface{}{
			"list":  list,
			"total": total,
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/test_by_key/:key", func(w http.ResponseWriter, r *http.Request) {
		keyValue, err := strconv.ParseInt(chi.URLParam(r, "key"), 10, 64)
		if err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "StringSvc.TestByKey1", "key"))
			return
		}
		var key = Key(keyValue)
		err = svc.TestByKey1(key)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test_by_key", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var key Key
		if s := queryParams.Get("key"); s != "" {
			keyValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestByKey2", "key"))
				return
			}
			key = Key(keyValue)
		}
		err := svc.TestByKey2(key)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test_by_strkey/:key", func(w http.ResponseWriter, r *http.Request) {
		var key = StrKey(chi.URLParam(r, "key"))
		err := svc.TestByStrKey1(key)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test_by_strkey", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var key = StrKey(queryParams.Get("key"))
		err := svc.TestByStrKey2(key)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id int64
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestInt64Query", "id"))
				return
			}
			id = idValue
		}
		err := svc.TestInt64Query(id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test_query_args1/:id", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id int64
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs1", "id"))
				return
			}
			id = idValue
		}
		var args QueryArgs
		if s := queryParams.Get("args.fint"); s != "" {
			fintValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs1", "Fint"))
				return
			}
			args.Fint = fintValue
		}
		args.Fstring = queryParams.Get("args.fstring")
		if s := queryParams.Get("args.ftime"); s != "" {
			ftimeValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs1", "Ftime"))
				return
			}
			args.Ftime = ftimeValue
		}
		if s := queryParams.Get("args.fintptr"); s != "" {
			fintptrValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs1", "Fintptr"))
				return
			}
			args.Fintptr = &fintptrValue
		}
		if s := queryParams.Get("args.fstringptr"); s != "" {
			args.Fstringptr = &s
		}
		if s := queryParams.Get("args.ftimeptr"); s != "" {
			ftimeptrValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs1", "Ftimeptr"))
				return
			}
			args.Ftimeptr = &ftimeptrValue
		}
		err := svc.TestQueryArgs1(id, args)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test_query_args2/:id", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id int64
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs2", "id"))
				return
			}
			id = idValue
		}
		var args *QueryArgs
		if s := queryParams.Get("args.fint"); s != "" {
			fintValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs2", "Fint"))
				return
			}
			if args == nil {
				args = new(QueryArgs)
			}
			args.Fint = fintValue
		}
		if args == nil {
			args = new(QueryArgs)
		}
		args.Fstring = queryParams.Get("args.fstring")
		if s := queryParams.Get("args.ftime"); s != "" {
			ftimeValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs2", "Ftime"))
				return
			}
			args.Ftime = ftimeValue
		}
		if s := queryParams.Get("args.fintptr"); s != "" {
			fintptrValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs2", "Fintptr"))
				return
			}
			args.Fintptr = &fintptrValue
		}
		if s := queryParams.Get("args.fstringptr"); s != "" {
			args.Fstringptr = &s
		}
		if s := queryParams.Get("args.ftimeptr"); s != "" {
			ftimeptrValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs2", "Ftimeptr"))
				return
			}
			args.Ftimeptr = &ftimeptrValue
		}
		err := svc.TestQueryArgs2(id, args)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test_query_args3/:id", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id int64
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs3", "id"))
				return
			}
			id = idValue
		}
		var args QueryArgs
		if s := queryParams.Get("fint"); s != "" {
			fintValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs3", "Fint"))
				return
			}
			args.Fint = fintValue
		}
		args.Fstring = queryParams.Get("fstring")
		if s := queryParams.Get("ftime"); s != "" {
			ftimeValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs3", "Ftime"))
				return
			}
			args.Ftime = ftimeValue
		}
		if s := queryParams.Get("fintptr"); s != "" {
			fintptrValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs3", "Fintptr"))
				return
			}
			args.Fintptr = &fintptrValue
		}
		if s := queryParams.Get("fstringptr"); s != "" {
			args.Fstringptr = &s
		}
		if s := queryParams.Get("ftimeptr"); s != "" {
			ftimeptrValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs3", "Ftimeptr"))
				return
			}
			args.Ftimeptr = &ftimeptrValue
		}
		err := svc.TestQueryArgs3(id, args)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test_query_args4/:id", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id int64
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs4", "id"))
				return
			}
			id = idValue
		}
		var args *QueryArgs
		if s := queryParams.Get("fint"); s != "" {
			fintValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs4", "Fint"))
				return
			}
			if args == nil {
				args = new(QueryArgs)
			}
			args.Fint = fintValue
		}
		if args == nil {
			args = new(QueryArgs)
		}
		args.Fstring = queryParams.Get("fstring")
		if s := queryParams.Get("ftime"); s != "" {
			ftimeValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs4", "Ftime"))
				return
			}
			args.Ftime = ftimeValue
		}
		if s := queryParams.Get("fintptr"); s != "" {
			fintptrValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs4", "Fintptr"))
				return
			}
			args.Fintptr = &fintptrValue
		}
		if s := queryParams.Get("fstringptr"); s != "" {
			args.Fstringptr = &s
		}
		if s := queryParams.Get("ftimeptr"); s != "" {
			ftimeptrValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs4", "Ftimeptr"))
				return
			}
			args.Ftimeptr = &ftimeptrValue
		}
		err := svc.TestQueryArgs4(id, args)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/ping", func(w http.ResponseWriter, r *http.Request) {
		err := svc.Ping()
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/echo", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var a = queryParams.Get("a")
		result := svc.Echo(a)
		render.JSON(w, r, result)
		return
	})
	mux.Post("/echo2", func(w http.ResponseWriter, r *http.Request) {
		result, err := svc.EchoBody(r.Body)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Post("/echo3", func(w http.ResponseWriter, r *http.Request) {
		var bindArgs struct {
			A string `json:"a,omitempty"`
		}
		if err := render.Decode(r, &bindArgs); err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "bindArgs", "body"))
			return
		}
		result, err := svc.Echo3(r.Context(), bindArgs.A)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/concat", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var a = queryParams.Get("a")
		var b = queryParams.Get("b")
		result, err := svc.Concat(a, b)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/concat1", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var a *string
		if s := queryParams.Get("a"); s != "" {
			a = &s
		}
		var b *string
		if s := queryParams.Get("b"); s != "" {
			b = &s
		}
		result, err := svc.Concat1(a, b)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/concat2/:a/:b", func(w http.ResponseWriter, r *http.Request) {
		var a = chi.URLParam(r, "a")
		var b = chi.URLParam(r, "b")
		result, err := svc.Concat2(a, b)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/concat3/:a/:b", func(w http.ResponseWriter, r *http.Request) {
		var a = chi.URLParam(r, "a")
		var b = chi.URLParam(r, "b")
		result, err := svc.Concat3(&a, &b)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/sub", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var a = queryParams.Get("a")
		var start int64
		if s := queryParams.Get("start"); s != "" {
			startValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Sub", "start"))
				return
			}
			start = startValue
		}
		result, err := svc.Sub(a, start)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
}
