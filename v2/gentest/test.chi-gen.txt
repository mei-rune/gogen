//go:build chi
// +build chi

// Please don't edit this file!
package main

import (
	"database/sql"
	"io"
	"net/http"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi"
	"github.com/go-chi/render"
	"github.com/runner-mei/gogen/v2/gentest/models"
)

// TimeRange is skipped
// TimeRange2 is skipped
// QueryArgs is skipped

func InitStringSvc(mux chi.Router, svc StringSvc) {
	mux.Get("/files", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var filenames = queryParams["filenames"]
		list, total, err := svc.GetFiles(filenames)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		result := map[string]interface{}{
			"list":  list,
			"total": total,
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/times", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var times []time.Time
		if ss := queryParams["times"]; len(ss) != 0 {
			timesValue, err := ToDatetimes(ss)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.GetTimes", "times"))
				return
			}
			times = timesValue
		}
		list, total, err := svc.GetTimes(times)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		result := map[string]interface{}{
			"list":  list,
			"total": total,
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/allfiles", func(w http.ResponseWriter, r *http.Request) {
		list, total, err := svc.GetAllFiles()
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		result := map[string]interface{}{
			"list":  list,
			"total": total,
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/test_by_key/:key", func(w http.ResponseWriter, r *http.Request) {
		keyValue, err := strconv.ParseInt(chi.URLParam(r, "key"), 10, 64)
		if err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "StringSvc.TestByKey1", "key"))
			return
		}
		var key = Key(keyValue)
		err = svc.TestByKey1(key)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test_by_key", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var key Key
		if s := queryParams.Get("key"); s != "" {
			keyValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestByKey2", "key"))
				return
			}
			key = Key(keyValue)
		}
		err := svc.TestByKey2(key)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test_by_strkey/:key", func(w http.ResponseWriter, r *http.Request) {
		var key = StrKey(chi.URLParam(r, "key"))
		err := svc.TestByStrKey1(key)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test_by_strkey", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var key = StrKey(queryParams.Get("key"))
		err := svc.TestByStrKey2(key)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id int64
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestInt64Query", "id"))
				return
			}
			id = idValue
		}
		err := svc.TestInt64Query(id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test_query_args1/:id", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id int64
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs1", "id"))
				return
			}
			id = idValue
		}
		var args QueryArgs
		if s := queryParams.Get("args.fint"); s != "" {
			fintValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs1", "args.fint"))
				return
			}
			args.Fint = fintValue
		}
		args.Fstring = queryParams.Get("args.fstring")
		if s := queryParams.Get("args.ftime"); s != "" {
			ftimeValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs1", "args.ftime"))
				return
			}
			args.Ftime = ftimeValue
		}
		if s := queryParams.Get("args.fintptr"); s != "" {
			fintptrValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs1", "args.fintptr"))
				return
			}
			args.Fintptr = &fintptrValue
		}
		if s := queryParams.Get("args.fstringptr"); s != "" {
			args.Fstringptr = &s
		}
		if s := queryParams.Get("args.ftimeptr"); s != "" {
			ftimeptrValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs1", "args.ftimeptr"))
				return
			}
			args.Ftimeptr = &ftimeptrValue
		}
		err := svc.TestQueryArgs1(id, args)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test_query_args2/:id", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id int64
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs2", "id"))
				return
			}
			id = idValue
		}
		var args *QueryArgs
		if s := queryParams.Get("args.fint"); s != "" {
			fintValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs2", "args.fint"))
				return
			}
			args = new(QueryArgs)
			args.Fint = fintValue
		}
		if args == nil {
			args = new(QueryArgs)
		}
		args.Fstring = queryParams.Get("args.fstring")
		if s := queryParams.Get("args.ftime"); s != "" {
			ftimeValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs2", "args.ftime"))
				return
			}
			args.Ftime = ftimeValue
		}
		if s := queryParams.Get("args.fintptr"); s != "" {
			fintptrValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs2", "args.fintptr"))
				return
			}
			args.Fintptr = &fintptrValue
		}
		if s := queryParams.Get("args.fstringptr"); s != "" {
			args.Fstringptr = &s
		}
		if s := queryParams.Get("args.ftimeptr"); s != "" {
			ftimeptrValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs2", "args.ftimeptr"))
				return
			}
			args.Ftimeptr = &ftimeptrValue
		}
		err := svc.TestQueryArgs2(id, args)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test_query_args3/:id", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id int64
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs3", "id"))
				return
			}
			id = idValue
		}
		var args QueryArgs
		if s := queryParams.Get("fint"); s != "" {
			fintValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs3", "fint"))
				return
			}
			args.Fint = fintValue
		}
		args.Fstring = queryParams.Get("fstring")
		if s := queryParams.Get("ftime"); s != "" {
			ftimeValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs3", "ftime"))
				return
			}
			args.Ftime = ftimeValue
		}
		if s := queryParams.Get("fintptr"); s != "" {
			fintptrValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs3", "fintptr"))
				return
			}
			args.Fintptr = &fintptrValue
		}
		if s := queryParams.Get("fstringptr"); s != "" {
			args.Fstringptr = &s
		}
		if s := queryParams.Get("ftimeptr"); s != "" {
			ftimeptrValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs3", "ftimeptr"))
				return
			}
			args.Ftimeptr = &ftimeptrValue
		}
		err := svc.TestQueryArgs3(id, args)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test_query_args4/:id", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id int64
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs4", "id"))
				return
			}
			id = idValue
		}
		var args *QueryArgs
		if s := queryParams.Get("fint"); s != "" {
			fintValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs4", "fint"))
				return
			}
			args = new(QueryArgs)
			args.Fint = fintValue
		}
		if args == nil {
			args = new(QueryArgs)
		}
		args.Fstring = queryParams.Get("fstring")
		if s := queryParams.Get("ftime"); s != "" {
			ftimeValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs4", "ftime"))
				return
			}
			args.Ftime = ftimeValue
		}
		if s := queryParams.Get("fintptr"); s != "" {
			fintptrValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs4", "fintptr"))
				return
			}
			args.Fintptr = &fintptrValue
		}
		if s := queryParams.Get("fstringptr"); s != "" {
			args.Fstringptr = &s
		}
		if s := queryParams.Get("ftimeptr"); s != "" {
			ftimeptrValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestQueryArgs4", "ftimeptr"))
				return
			}
			args.Ftimeptr = &ftimeptrValue
		}
		err := svc.TestQueryArgs4(id, args)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/ping", func(w http.ResponseWriter, r *http.Request) {
		err := svc.Ping()
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/echo", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var a = queryParams.Get("a")
		result := svc.Echo(a)
		render.JSON(w, r, result)
		return
	})
	mux.Post("/echo2", func(w http.ResponseWriter, r *http.Request) {
		result, err := svc.EchoBody(r.Body)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Post("/echo3", func(w http.ResponseWriter, r *http.Request) {
		var bindArgs struct {
			A string `json:"a,omitempty"`
		}
		if err := render.Decode(r, &bindArgs); err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "bindArgs", "body"))
			return
		}
		result, err := svc.Echo3(r.Context(), bindArgs.A)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/concat", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var a = queryParams.Get("a")
		var b = queryParams.Get("b")
		result, err := svc.Concat0(a, b)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/concat1", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var a *string
		if s := queryParams.Get("a"); s != "" {
			a = &s
		}
		var b *string
		if s := queryParams.Get("b"); s != "" {
			b = &s
		}
		result, err := svc.Concat1(a, b)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/concat2/:a/:b", func(w http.ResponseWriter, r *http.Request) {
		var a = chi.URLParam(r, "a")
		var b = chi.URLParam(r, "b")
		result, err := svc.Concat2(a, b)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/concat3/:a/:b", func(w http.ResponseWriter, r *http.Request) {
		var a = chi.URLParam(r, "a")
		var b = chi.URLParam(r, "b")
		result, err := svc.Concat3(&a, &b)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/sub", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var a = queryParams.Get("a")
		var start int64
		if s := queryParams.Get("start"); s != "" {
			startValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Sub", "start"))
				return
			}
			start = startValue
		}
		result, err := svc.Sub(a, start)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/save/:a", func(w http.ResponseWriter, r *http.Request) {
		var a = chi.URLParam(r, "a")
		var b strings.Builder
		if _, err := io.Copy(&b, r.Body); err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "b", "body"))
			return
		}
		result, err := svc.Save(a, b.String())
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Post("/save2/:a", func(w http.ResponseWriter, r *http.Request) {
		var a = chi.URLParam(r, "a")
		var bBuilder strings.Builder
		if _, err := io.Copy(&bBuilder, r.Body); err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "b", "body"))
			return
		}
		var b = bBuilder.String()
		result, err := svc.Save2(&a, &b)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Post("/save3", func(w http.ResponseWriter, r *http.Request) {
		var bindArgs struct {
			A *string `json:"a,omitempty"`
			B *string `json:"b,omitempty"`
		}
		if err := render.Decode(r, &bindArgs); err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "bindArgs", "body"))
			return
		}
		result, err := svc.Save3(bindArgs.A, bindArgs.B)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Post("/save4", func(w http.ResponseWriter, r *http.Request) {
		var bindArgs struct {
			A string `json:"a,omitempty"`
			B string `json:"b,omitempty"`
		}
		if err := render.Decode(r, &bindArgs); err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "bindArgs", "body"))
			return
		}
		result, err := svc.Save4(bindArgs.A, bindArgs.B)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Post("/save5", func(w http.ResponseWriter, r *http.Request) {
		var bindArgs struct {
			A string `json:"a,omitempty"`
			B string `json:"b,omitempty"`
		}
		if err := render.Decode(r, &bindArgs); err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "bindArgs", "body"))
			return
		}
		result, err := svc.Save5(r.Context(), bindArgs.A, bindArgs.B)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/add/:a/:b", func(w http.ResponseWriter, r *http.Request) {
		a, err := strconv.Atoi(chi.URLParam(r, "a"))
		if err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "StringSvc.Add1", "a"))
			return
		}
		b, err := strconv.Atoi(chi.URLParam(r, "b"))
		if err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "StringSvc.Add1", "b"))
			return
		}
		result, err := svc.Add1(a, b)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/add2/:a/:b", func(w http.ResponseWriter, r *http.Request) {
		a, err := strconv.Atoi(chi.URLParam(r, "a"))
		if err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "StringSvc.Add2", "a"))
			return
		}
		b, err := strconv.Atoi(chi.URLParam(r, "b"))
		if err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "StringSvc.Add2", "b"))
			return
		}
		result, err := svc.Add2(&a, &b)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/add3", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var a *int
		if s := queryParams.Get("a"); s != "" {
			aValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Add3", "a"))
				return
			}
			a = &aValue
		}
		var b *int
		if s := queryParams.Get("b"); s != "" {
			bValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Add3", "b"))
				return
			}
			b = &bValue
		}
		result, err := svc.Add3(a, b)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
	mux.Get("/query1", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var a = queryParams.Get("a")
		var beginAt time.Time
		if s := queryParams.Get("begin_at"); s != "" {
			beginAtValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Query1", "begin_at"))
				return
			}
			beginAt = beginAtValue
		}
		var endAt time.Time
		if s := queryParams.Get("end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Query1", "end_at"))
				return
			}
			endAt = endAtValue
		}
		var isRaw bool
		if s := queryParams.Get("is_raw"); s != "" {
			isRawValue, err := strconv.ParseBool(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Query1", "is_raw"))
				return
			}
			isRaw = isRawValue
		}
		result := svc.Query1(a, beginAt, endAt, isRaw)
		render.JSON(w, r, result)
		return
	})
	mux.Get("/query2/:isRaw", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var a = queryParams.Get("a")
		var beginAt time.Time
		if s := queryParams.Get("begin_at"); s != "" {
			beginAtValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Query2", "begin_at"))
				return
			}
			beginAt = beginAtValue
		}
		var endAt time.Time
		if s := queryParams.Get("end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Query2", "end_at"))
				return
			}
			endAt = endAtValue
		}
		isRaw, err := strconv.ParseBool(chi.URLParam(r, "is_raw"))
		if err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "StringSvc.Query2", "is_raw"))
			return
		}
		result := svc.Query2(a, beginAt, endAt, isRaw)
		render.JSON(w, r, result)
		return
	})
	mux.Get("/query3/:isRaw", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var a = queryParams.Get("a")
		var beginAt time.Time
		if s := queryParams.Get("begin_at"); s != "" {
			beginAtValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Query3", "begin_at"))
				return
			}
			beginAt = beginAtValue
		}
		var endAt time.Time
		if s := queryParams.Get("end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Query3", "end_at"))
				return
			}
			endAt = endAtValue
		}
		isRaw, err := strconv.ParseBool(chi.URLParam(r, "is_raw"))
		if err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "StringSvc.Query3", "is_raw"))
			return
		}
		result := svc.Query3(a, beginAt, endAt, &isRaw)
		render.JSON(w, r, result)
		return
	})
	mux.Get("/query4/:isRaw", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var a = queryParams.Get("a")
		var createdAt TimeRange
		if s := queryParams.Get("created_at.start"); s != "" {
			startValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Query4", "created_at.start"))
				return
			}
			createdAt.Start = startValue
		}
		if s := queryParams.Get("created_at.end"); s != "" {
			endValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Query4", "created_at.end"))
				return
			}
			createdAt.End = endValue
		}
		isRaw, err := strconv.ParseBool(chi.URLParam(r, "is_raw"))
		if err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "StringSvc.Query4", "is_raw"))
			return
		}
		result := svc.Query4(a, createdAt, &isRaw)
		render.JSON(w, r, result)
		return
	})
	mux.Get("/query5/:isRaw", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var a = queryParams.Get("a")
		var createdAt *TimeRange
		if s := queryParams.Get("created_at.start"); s != "" {
			startValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Query5", "created_at.start"))
				return
			}
			createdAt = new(TimeRange)
			createdAt.Start = startValue
		}
		if s := queryParams.Get("created_at.end"); s != "" {
			endValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Query5", "created_at.end"))
				return
			}
			if createdAt == nil {
				createdAt = new(TimeRange)
			}
			createdAt.End = endValue
		}
		isRaw, err := strconv.ParseBool(chi.URLParam(r, "is_raw"))
		if err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "StringSvc.Query5", "is_raw"))
			return
		}
		result := svc.Query5(a, createdAt, &isRaw)
		render.JSON(w, r, result)
		return
	})
	mux.Get("/query6/:isRaw", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var a = queryParams.Get("a")
		var createdAt TimeRange2
		if s := queryParams.Get("created_at.start"); s != "" {
			startValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Query6", "created_at.start"))
				return
			}
			createdAt.Start = &startValue
		}
		if s := queryParams.Get("created_at.end"); s != "" {
			endValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Query6", "created_at.end"))
				return
			}
			createdAt.End = &endValue
		}
		isRaw, err := strconv.ParseBool(chi.URLParam(r, "is_raw"))
		if err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "StringSvc.Query6", "is_raw"))
			return
		}
		result := svc.Query6(a, createdAt, &isRaw)
		render.JSON(w, r, result)
		return
	})
	mux.Get("/query7/:isRaw", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var a = queryParams.Get("a")
		var createdAt *TimeRange2
		if s := queryParams.Get("created_at.start"); s != "" {
			startValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Query7", "created_at.start"))
				return
			}
			createdAt = new(TimeRange2)
			createdAt.Start = &startValue
		}
		if s := queryParams.Get("created_at.end"); s != "" {
			endValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.Query7", "created_at.end"))
				return
			}
			if createdAt == nil {
				createdAt = new(TimeRange2)
			}
			createdAt.End = &endValue
		}
		isRaw, err := strconv.ParseBool(chi.URLParam(r, "is_raw"))
		if err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "StringSvc.Query7", "is_raw"))
			return
		}
		result := svc.Query7(a, createdAt, &isRaw)
		render.JSON(w, r, result)
		return
	})
	mux.Get("/query8", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var itemID int64
		if s := queryParams.Get("item_id"); s != "" {
			itemIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.PlainText(w, r, NewBadArgument(err, "StringSvc.Query8", "item_id").Error())
				return
			}
			itemID = itemIDValue
		}
		result, err := svc.Query8(r.Context(), itemID)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.PlainText(w, r, err.Error())
			return
		}
		render.PlainText(w, r, result)
		return
	})
	mux.Post("", func(w http.ResponseWriter, r *http.Request) {
		err := svc.CreateWithNoReturn(r.Context(), r, w)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
	})
	mux.Get("/query9", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var itemID sql.NullInt64
		if s := queryParams.Get("item_id"); s != "" {
			itemIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.PlainText(w, r, NewBadArgument(err, "StringSvc.Query9", "item_id").Error())
				return
			}
			itemID.Valid = true
			itemID.Int64 = itemIDValue
		}
		result, err := svc.Query9(r.Context(), itemID)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.PlainText(w, r, err.Error())
			return
		}
		render.PlainText(w, r, result)
		return
	})
	mux.Get("/query10", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var itemID sql.NullString
		if s := queryParams.Get("item_id"); s != "" {
			itemID.Valid = true
			itemID.String = s
		}
		result, err := svc.Query10(r.Context(), itemID)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.PlainText(w, r, err.Error())
			return
		}
		render.PlainText(w, r, result)
		return
	})
	mux.Get("/query11", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var itemID sql.NullBool
		if s := queryParams.Get("item_id"); s != "" {
			itemIDValue, err := strconv.ParseBool(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.PlainText(w, r, NewBadArgument(err, "StringSvc.Query11", "item_id").Error())
				return
			}
			itemID.Valid = true
			itemID.Bool = itemIDValue
		}
		result, err := svc.Query11(r.Context(), itemID)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.PlainText(w, r, err.Error())
			return
		}
		render.PlainText(w, r, result)
		return
	})
	mux.Get("/query12", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var Name = queryParams.Get("Name")
		result, err := svc.Query1WithUpName(r.Context(), Name)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.PlainText(w, r, err.Error())
			return
		}
		render.PlainText(w, r, result)
		return
	})
	mux.Post("/query12", func(w http.ResponseWriter, r *http.Request) {
		var bindArgs struct {
			Name string `json:"Name,omitempty"`
		}
		if err := render.Decode(r, &bindArgs); err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "bindArgs", "body"))
			return
		}
		err := svc.Set1WithUpName(r.Context(), bindArgs.Name)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
}

// RequestQueryEx1 is skipped
// RequestQueryEx2 is skipped
// RequestQueryEx3 is skipped
// RequestQueryEx4 is skipped
// Sub1 is skipped
// Sub2 is skipped
// Sub3 is skipped
// SubTest1 is skipped
// SubTest2 is skipped
// SubTest3 is skipped
// SubTest4 is skipped

func InitRequests(mux chi.Router, svc Requests) {
	mux.Get("/requests/query1", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var query *models.RequestQuery
		if s := queryParams.Get("query.operatorID"); s != "" {
			operatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "Requests.Query1", "query.operatorID"))
				return
			}
			query = new(models.RequestQuery)
			query.OperatorID = operatorIDValue
		}
		if s := queryParams.Get("query.creatorID"); s != "" {
			creatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "Requests.Query1", "query.creatorID"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.CreatorID = creatorIDValue
		}
		if s := queryParams.Get("query.requesterID"); s != "" {
			requesterIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "Requests.Query1", "query.requesterID"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.RequesterID = requesterIDValue
		}
		if ss := queryParams["query.requestTypeIDs"]; len(ss) != 0 {
			requestTypeIDsValue, err := ToInt64Array(ss)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "Requests.Query1", "query.requestTypeIDs"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.RequestTypeIDs = requestTypeIDsValue
		}
		if query == nil {
			query = new(models.RequestQuery)
		}
		query.RequestTypeNames = queryParams["query.requestTypeNames"]
		query.NameLike = queryParams.Get("query.nameLike")
		if s := queryParams.Get("query.currentStatus"); s != "" {
			currentStatusValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "Requests.Query1", "query.currentStatus"))
				return
			}
			query.CurrentStatus = currentStatusValue
		}
		if s := queryParams.Get("query.isUnclosed"); s != "" {
			isUnclosedValue, err := strconv.ParseBool(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "Requests.Query1", "query.isUnclosed"))
				return
			}
			query.IsUnclosed.Valid = true
			query.IsUnclosed.Bool = isUnclosedValue
		}
		if s := queryParams.Get("query.isOverdued"); s != "" {
			isOverduedValue, err := strconv.ParseBool(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "Requests.Query1", "query.isOverdued"))
				return
			}
			query.IsOverdued.Valid = true
			query.IsOverdued.Bool = isOverduedValue
		}
		if s := queryParams.Get("query.isSuspend"); s != "" {
			isSuspendValue, err := strconv.ParseBool(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "Requests.Query1", "query.isSuspend"))
				return
			}
			query.IsSuspend.Valid = true
			query.IsSuspend.Bool = isSuspendValue
		}
		if s := queryParams.Get("query.startAt"); s != "" {
			startAtValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "Requests.Query1", "query.startAt"))
				return
			}
			query.StartAt = startAtValue
		}
		if s := queryParams.Get("query.endAt"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "Requests.Query1", "query.endAt"))
				return
			}
			query.EndAt = endAtValue
		}
		if s := queryParams.Get("query.overdueStart"); s != "" {
			overdueStartValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "Requests.Query1", "query.overdueStart"))
				return
			}
			query.OverdueStart = overdueStartValue
		}
		if s := queryParams.Get("query.overdueEnd"); s != "" {
			overdueEndValue, err := ToDatetime(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "Requests.Query1", "query.overdueEnd"))
				return
			}
			query.OverdueEnd = overdueEndValue
		}

		for key, values := range r.URL.Query() {
			if !strings.HasPrefix(key, "query.settings.") {
				continue
			}
			query.Settings[key] = values[len(values)-1]
		}

		for key, values := range r.URL.Query() {
			if !strings.HasPrefix(key, "query.ttargstt.") {
				continue
			}
			query.Args[key] = values[len(values)-1]
		}

		for key, values := range r.URL.Query() {
			if !strings.HasPrefix(key, "query.") {
				continue
			}
			if key == "query.operatorID" ||
				key == "query.creatorID" ||
				key == "query.requesterID" ||
				key == "query.requestTypeIDs" ||
				key == "query.requestTypeNames" ||
				key == "query.nameLike" ||
				key == "query.currentStatus" ||
				key == "query.isUnclosed" ||
				key == "query.isOverdued" ||
				key == "query.isSuspend" ||
				key == "query.startAt" ||
				key == "query.endAt" ||
				key == "query.overdueStart" ||
				key == "query.overdueEnd" {
				continue
			}
			query.Values[key] = values
		}
		var offset int64
		if s := queryParams.Get("offset"); s != "" {
			offsetValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "Requests.Query1", "offset"))
				return
			}
			offset = offsetValue
		}
		var limit int64
		if s := queryParams.Get("limit"); s != "" {
			limitValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "Requests.Query1", "limit"))
				return
			}
			limit = limitValue
		}
		var params = map[string]string{}
		for key, values := range r.URL.Query() {
			if !strings.HasPrefix(key, "params.") {
				continue
			}
			params[key] = values[len(values)-1]
		}
		result, err := svc.Query1(r.Context(), query, offset, limit, params)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, result)
		return
	})
}
