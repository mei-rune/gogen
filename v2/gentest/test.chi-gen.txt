//go:build chi
// +build chi

// Please don't edit this file!
package main

import (
	"database/sql"
	"net/http"
	"strconv"

	"github.com/go-chi/chi"
	"github.com/go-chi/render"
)

// TimeRange is skipped
// TimeRange2 is skipped
// QueryArgs is skipped

func InitStringSvc(mux chi.Router, svc StringSvc) {
	mux.Get("/test64/by_name/:name", func(w http.ResponseWriter, r *http.Request) {
		var name = chi.URLParam(r, "name")
		err := svc.TestCase1(name)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/by_name", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var name = queryParams.Get("name")
		err := svc.TestCase2_1(name)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/by_names", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var name = queryParams["name"]
		err := svc.TestCase2_2(name)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/by_id/:id", func(w http.ResponseWriter, r *http.Request) {
		id, err := strconv.ParseInt(chi.URLParam(r, "id"), 10, 64)
		if err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "StringSvc.TestCase3_1", "id"))
			return
		}
		err := svc.TestCase3_1(id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/by_id/:id", func(w http.ResponseWriter, r *http.Request) {
		idValue, err := strconv.ParseInt(chi.URLParam(r, "id"), 10, 32)
		if err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "StringSvc.TestCase3_2", "id"))
			return
		}
		id = int32(idValue)
		err := svc.TestCase3_2(id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/by_id/:id", func(w http.ResponseWriter, r *http.Request) {
		id, err := strconv.Atoi(chi.URLParam(r, "id"))
		if err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "StringSvc.TestCase3_3", "id"))
			return
		}
		err := svc.TestCase3_3(id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/by_id/:id", func(w http.ResponseWriter, r *http.Request) {
		id, err := strconv.Atoi(chi.URLParam(r, "id"))
		if err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "StringSvc.TestCase4", "id"))
			return
		}
		err := svc.TestCase4(id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/by_id", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id int64
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestCase5_1", "id"))
				return
			}
			id = idValue
		}
		err := svc.TestCase5_1(id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/by_id", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id int32
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 32)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestCase5_2", "id"))
				return
			}
			id = int32(idValue)
		}
		err := svc.TestCase5_2(id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/by_id", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var idlist []int64
		if ss := queryParams["idlist"]; len(ss) != 0 {
			idlistValue, err := ToInt64Array(ss)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestCase5_3", "idlist"))
				return
			}
			idlist = idlistValue
		}
		err := svc.TestCase5_3(idlist)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/by_id", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id int64
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestCase6", "id"))
				return
			}
			id = idValue
		}
		err := svc.TestCase6(id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/by_id", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id sql.NullInt64
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestCase7_1", "id"))
				return
			}
			id.Int64 = idValue
			id.Valid = true
		}
		err := svc.TestCase7_1(id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/by_id", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id sql.NullInt32
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 32)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestCase7_2", "id"))
				return
			}
			id.Int32 = int32(idValue)
			id.Valid = true
		}
		err := svc.TestCase7_2(id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/by_id", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id sql.NullInt64
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestCase8", "id"))
				return
			}
			id.Int64 = idValue
			id.Valid = true
		}
		err := svc.TestCase8(id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/by_id/:id", func(w http.ResponseWriter, r *http.Request) {
		var id = chi.URLParam(r, "id")
		err := svc.TestCase9(&id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/by_name", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id *string
		if s := queryParams.Get("id"); s != "" {
			id = &s
		}
		err := svc.TestCase10(id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/:id", func(w http.ResponseWriter, r *http.Request) {
		var id *int
		if idValue, err = strconv.Atoi(chi.URLParam(r, "id")); err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "StringSvc.TestCase12", "id"))
			return
		} else {
			id = &idValue
		}
		err := svc.TestCase12(id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/:id", func(w http.ResponseWriter, r *http.Request) {
		var id *int
		if idValue, err = strconv.Atoi(chi.URLParam(r, "id")); err != nil {
			render.Status(r, http.StatusBadRequest)
			render.JSON(w, r, NewBadArgument(err, "StringSvc.TestCase13", "id"))
			return
		} else {
			id = &idValue
		}
		err := svc.TestCase13(id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/by_id", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id *int
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestCase14_1", "id"))
				return
			}
			id = &idValue
		}
		err := svc.TestCase14_1(id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/by_name", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id *int32
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 32)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestCase14_2", "id"))
				return
			}
			id = new(int32)
			*id = int32(idValue)
		}
		err := svc.TestCase14_2(id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
	mux.Get("/test64/by_name", func(w http.ResponseWriter, r *http.Request) {
		queryParams := r.URL.Query()
		var id *int
		if s := queryParams.Get("id"); s != "" {
			idValue, err := strconv.Atoi(s)
			if err != nil {
				render.Status(r, http.StatusBadRequest)
				render.JSON(w, r, NewBadArgument(err, "StringSvc.TestCase14_3", "id"))
				return
			}
			id = &idValue
		}
		err := svc.TestCase14_3(id)
		if err != nil {
			render.Status(r, httpCodeWith(err))
			render.JSON(w, r, err)
			return
		}
		render.JSON(w, r, "OK")
		return
	})
}
