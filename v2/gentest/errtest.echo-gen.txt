//go:build echo
// +build echo

// Please don't edit this file!
package main

import (
	"errors"
	"net/http"
	"strconv"

	echo "github.com/labstack/echo/v4"
)

func InitErrStringSvc(mux *echo.Group, svc ErrStringSvc) {
	mux.GET("/files1", func(ctx echo.Context) error {
		list, total, err := svc.Get1()
		if err != nil {
			return ctx.JSON(errors.GetHttpCode(err), errors.ToEncodedError(err))
		}
		result := map[string]interface{}{
			"list":  list,
			"total": total,
		}
		return ctx.JSON(http.StatusOK, result)
	})
	mux.GET("/files2", func(ctx echo.Context) error {
		list, total, err := svc.Get2()
		if err != nil {
			return ctx.JSON(errors.GetHttpCode(err), errors.ToEncodedError(err))
		}
		result := map[string]interface{}{
			"list":  list,
			"total": total,
		}
		return ctx.JSON(http.StatusOK, result)
	})
	mux.GET("/files3", func(ctx echo.Context) error {
		err := svc.Get3()
		if err != nil {
			return ctx.JSON(errors.GetHttpCode(err), errors.ToEncodedError(err))
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/files4", func(ctx echo.Context) error {
		var id int
		if s := ctx.QueryParam("id"); s != "" {
			idValue, err := strconv.Atoi(s)
			if err != nil {
				return ctx.JSON(http.StatusBadRequest, errors.NewBadArgument(err, "ErrStringSvc.Get4", "id"))
			}
			id = idValue
		}
		err := svc.Get4(id)
		if err != nil {
			return ctx.JSON(errors.GetHttpCode(err), errors.ToEncodedError(err))
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
}
