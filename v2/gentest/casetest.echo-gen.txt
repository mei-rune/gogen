//go:build echo
// +build echo

// Please don't edit this file!
package main

import (
	"database/sql"
	"net/http"
	"strconv"

	echo "github.com/labstack/echo/v4"
)

func InitCaseSvc(mux echo.Group, svc CaseSvc) {
	mux.GET("/case1/by_name/:name", func(ctx echo.Context) error {
		var name = ctx.Param("name")
		err := svc.TestCase1(name)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case2_1/by_name", func(ctx echo.Context) error {
		var name = ctx.QueryParam("name")
		err := svc.TestCase2_1(name)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case2_2/by_names", func(ctx echo.Context) error {
		var name = ctx.QueryParams()["name"]
		err := svc.TestCase2_2(name)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case3_1/by_id/:id", func(ctx echo.Context) error {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			return ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "CaseSvc.TestCase3_1", "id"))
		}
		err = svc.TestCase3_1(id)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case3_2/by_id/:id", func(ctx echo.Context) error {
		idValue, err := strconv.ParseInt(ctx.Param("id"), 10, 32)
		if err != nil {
			return ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "CaseSvc.TestCase3_2", "id"))
		}
		var id = int32(idValue)
		err = svc.TestCase3_2(id)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case3_3/by_id/:id", func(ctx echo.Context) error {
		id, err := strconv.Atoi(ctx.Param("id"))
		if err != nil {
			return ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "CaseSvc.TestCase3_3", "id"))
		}
		err = svc.TestCase3_3(id)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case4/by_id/:id", func(ctx echo.Context) error {
		id, err := strconv.Atoi(ctx.Param("id"))
		if err != nil {
			return ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "CaseSvc.TestCase4", "id"))
		}
		err = svc.TestCase4(id)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case5_1/by_id", func(ctx echo.Context) error {
		var id int64
		if s := ctx.QueryParam("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				return ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "CaseSvc.TestCase5_1", "id"))
			}
			id = idValue
		}
		err := svc.TestCase5_1(id)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case5_2/by_id", func(ctx echo.Context) error {
		var id int32
		if s := ctx.QueryParam("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 32)
			if err != nil {
				return ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "CaseSvc.TestCase5_2", "id"))
			}
			id = int32(idValue)
		}
		err := svc.TestCase5_2(id)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case5_3/by_id", func(ctx echo.Context) error {
		var idlist []int64
		if ss := ctx.QueryParams()["idlist"]; len(ss) != 0 {
			idlistValue, err := ToInt64Array(ss)
			if err != nil {
				return ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "CaseSvc.TestCase5_3", "idlist"))
			}
			idlist = idlistValue
		}
		err := svc.TestCase5_3(idlist)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case6/by_id", func(ctx echo.Context) error {
		var id int64
		if s := ctx.QueryParam("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				return ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "CaseSvc.TestCase6", "id"))
			}
			id = idValue
		}
		err := svc.TestCase6(id)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case7_1/by_id", func(ctx echo.Context) error {
		var id sql.NullInt64
		if s := ctx.QueryParam("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				return ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "CaseSvc.TestCase7_1", "id"))
			}
			id.Valid = true
			id.Int64 = idValue
		}
		err := svc.TestCase7_1(id)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case7_2/by_id", func(ctx echo.Context) error {
		var id sql.NullInt32
		if s := ctx.QueryParam("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 32)
			if err != nil {
				return ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "CaseSvc.TestCase7_2", "id"))
			}
			id.Valid = true
			id.Int32 = int32(idValue)
		}
		err := svc.TestCase7_2(id)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case8/by_id", func(ctx echo.Context) error {
		var id sql.NullInt64
		if s := ctx.QueryParam("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				return ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "CaseSvc.TestCase8", "id"))
			}
			id.Valid = true
			id.Int64 = idValue
		}
		err := svc.TestCase8(id)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case9/by_id/:id", func(ctx echo.Context) error {
		var id = ctx.Param("id")
		err := svc.TestCase9(&id)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case10/by_name", func(ctx echo.Context) error {
		var id *string
		if s := ctx.QueryParam("id"); s != "" {
			id = &s
		}
		err := svc.TestCase10(id)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case12/:id", func(ctx echo.Context) error {
		id, err := strconv.Atoi(ctx.Param("id"))
		if err != nil {
			return ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "CaseSvc.TestCase12", "id"))
		}
		err = svc.TestCase12(&id)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case13/:id", func(ctx echo.Context) error {
		id, err := strconv.Atoi(ctx.Param("id"))
		if err != nil {
			return ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "CaseSvc.TestCase13", "id"))
		}
		err = svc.TestCase13(&id)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case14_1/by_id", func(ctx echo.Context) error {
		var id *int
		if s := ctx.QueryParam("id"); s != "" {
			idValue, err := strconv.Atoi(s)
			if err != nil {
				return ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "CaseSvc.TestCase14_1", "id"))
			}
			id = &idValue
		}
		err := svc.TestCase14_1(id)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case14_2/by_name", func(ctx echo.Context) error {
		var id *int32
		if s := ctx.QueryParam("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 32)
			if err != nil {
				return ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "CaseSvc.TestCase14_2", "id"))
			}
			id = new(int32)
			*id = int32(idValue)
		}
		err := svc.TestCase14_2(id)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
	mux.GET("/case14_3/by_name", func(ctx echo.Context) error {
		var id *int
		if s := ctx.QueryParam("id"); s != "" {
			idValue, err := strconv.Atoi(s)
			if err != nil {
				return ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "CaseSvc.TestCase14_3", "id"))
			}
			id = &idValue
		}
		err := svc.TestCase14_3(id)
		if err != nil {
			return ctx.JSON(httpCodeWith(err), err)
		}
		return ctx.JSON(http.StatusOK, "OK")
	})
}
