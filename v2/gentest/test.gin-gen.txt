//go:build gin
// +build gin

// Please don't edit this file!
package main

import (
	"database/sql"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/runner-mei/gogen/v2/gentest/models"
)

// TimeRange is skipped
// TimeRange2 is skipped
// QueryArgs is skipped

func InitStringSvc(mux gin.IRouter, svc StringSvc) {
	mux.GET("/files", func(ctx *gin.Context) {
		var filenames = ctx.QueryArray("filenames")
		list, total, err := svc.GetFiles(filenames)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		result := map[string]interface{}{
			"list":  list,
			"total": total,
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/times", func(ctx *gin.Context) {
		var times []time.Time
		if ss := ctx.QueryArray("times"); len(ss) != 0 {
			timesValue, err := ToDatetimes(ss)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.GetTimes", "times"))
				return
			}
			times = timesValue
		}
		list, total, err := svc.GetTimes(times)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		result := map[string]interface{}{
			"list":  list,
			"total": total,
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/allfiles", func(ctx *gin.Context) {
		list, total, err := svc.GetAllFiles()
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		result := map[string]interface{}{
			"list":  list,
			"total": total,
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/test_by_key/:key", func(ctx *gin.Context) {
		keyValue, err := strconv.ParseInt(ctx.Param("key"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestByKey1", "key"))
			return
		}
		var key = Key(keyValue)
		err = svc.TestByKey1(key)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/test_by_key", func(ctx *gin.Context) {
		var key Key
		if s := ctx.Query("key"); s != "" {
			keyValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestByKey2", "key"))
				return
			}
			key = Key(keyValue)
		}
		err := svc.TestByKey2(key)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/test_by_strkey/:key", func(ctx *gin.Context) {
		var key = StrKey(ctx.Param("key"))
		err := svc.TestByStrKey1(key)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/test_by_strkey", func(ctx *gin.Context) {
		var key = StrKey(ctx.Query("key"))
		err := svc.TestByStrKey2(key)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/test64/:id", func(ctx *gin.Context) {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestInt64Path", "id"))
			return
		}
		err = svc.TestInt64Path(id)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/test64", func(ctx *gin.Context) {
		var id int64
		if s := ctx.Query("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestInt64Query", "id"))
				return
			}
			id = idValue
		}
		err := svc.TestInt64Query(id)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/test_query_args1/:id", func(ctx *gin.Context) {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs1", "id"))
			return
		}
		var args QueryArgs
		if s := ctx.Query("args.fint"); s != "" {
			fintValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs1", "args.fint"))
				return
			}
			args.Fint = fintValue
		}
		args.Fstring = ctx.Query("args.fstring")
		if s := ctx.Query("args.ftime"); s != "" {
			ftimeValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs1", "args.ftime"))
				return
			}
			args.Ftime = ftimeValue
		}
		if s := ctx.Query("args.fintptr"); s != "" {
			fintptrValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs1", "args.fintptr"))
				return
			}
			args.Fintptr = &fintptrValue
		}
		if s := ctx.Query("args.fstringptr"); s != "" {
			args.Fstringptr = &s
		}
		if s := ctx.Query("args.ftimeptr"); s != "" {
			ftimeptrValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs1", "args.ftimeptr"))
				return
			}
			args.Ftimeptr = &ftimeptrValue
		}
		err = svc.TestQueryArgs1(id, args)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/test_query_args2/:id", func(ctx *gin.Context) {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs2", "id"))
			return
		}
		var args *QueryArgs
		if s := ctx.Query("args.fint"); s != "" {
			fintValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs2", "args.fint"))
				return
			}
			args = new(QueryArgs)
			args.Fint = fintValue
		}
		if s := ctx.Query("args.fstring"); s != "" {
			if args == nil {
				args = new(QueryArgs)
			}
			args.Fstring = ctx.Query("args.fstring")
		}
		if s := ctx.Query("args.ftime"); s != "" {
			ftimeValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs2", "args.ftime"))
				return
			}
			if args == nil {
				args = new(QueryArgs)
			}
			args.Ftime = ftimeValue
		}
		if s := ctx.Query("args.fintptr"); s != "" {
			fintptrValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs2", "args.fintptr"))
				return
			}
			if args == nil {
				args = new(QueryArgs)
			}
			args.Fintptr = &fintptrValue
		}
		if s := ctx.Query("args.fstringptr"); s != "" {
			if args == nil {
				args = new(QueryArgs)
			}
			args.Fstringptr = &s
		}
		if s := ctx.Query("args.ftimeptr"); s != "" {
			ftimeptrValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs2", "args.ftimeptr"))
				return
			}
			if args == nil {
				args = new(QueryArgs)
			}
			args.Ftimeptr = &ftimeptrValue
		}
		err = svc.TestQueryArgs2(id, args)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/test_query_args3/:id", func(ctx *gin.Context) {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs3", "id"))
			return
		}
		var args QueryArgs
		if s := ctx.Query("fint"); s != "" {
			fintValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs3", "fint"))
				return
			}
			args.Fint = fintValue
		}
		args.Fstring = ctx.Query("fstring")
		if s := ctx.Query("ftime"); s != "" {
			ftimeValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs3", "ftime"))
				return
			}
			args.Ftime = ftimeValue
		}
		if s := ctx.Query("fintptr"); s != "" {
			fintptrValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs3", "fintptr"))
				return
			}
			args.Fintptr = &fintptrValue
		}
		if s := ctx.Query("fstringptr"); s != "" {
			args.Fstringptr = &s
		}
		if s := ctx.Query("ftimeptr"); s != "" {
			ftimeptrValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs3", "ftimeptr"))
				return
			}
			args.Ftimeptr = &ftimeptrValue
		}
		err = svc.TestQueryArgs3(id, args)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/test_query_args4/:id", func(ctx *gin.Context) {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs4", "id"))
			return
		}
		var args *QueryArgs
		if s := ctx.Query("fint"); s != "" {
			fintValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs4", "fint"))
				return
			}
			args = new(QueryArgs)
			args.Fint = fintValue
		}
		if s := ctx.Query("fstring"); s != "" {
			if args == nil {
				args = new(QueryArgs)
			}
			args.Fstring = ctx.Query("fstring")
		}
		if s := ctx.Query("ftime"); s != "" {
			ftimeValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs4", "ftime"))
				return
			}
			if args == nil {
				args = new(QueryArgs)
			}
			args.Ftime = ftimeValue
		}
		if s := ctx.Query("fintptr"); s != "" {
			fintptrValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs4", "fintptr"))
				return
			}
			if args == nil {
				args = new(QueryArgs)
			}
			args.Fintptr = &fintptrValue
		}
		if s := ctx.Query("fstringptr"); s != "" {
			if args == nil {
				args = new(QueryArgs)
			}
			args.Fstringptr = &s
		}
		if s := ctx.Query("ftimeptr"); s != "" {
			ftimeptrValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.TestQueryArgs4", "ftimeptr"))
				return
			}
			if args == nil {
				args = new(QueryArgs)
			}
			args.Ftimeptr = &ftimeptrValue
		}
		err = svc.TestQueryArgs4(id, args)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/ping", func(ctx *gin.Context) {
		err := svc.Ping()
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/echo", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		result := svc.Echo(a)
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.POST("/echo2", func(ctx *gin.Context) {
		result, err := svc.EchoBody(ctx.Request.Body)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.POST("/echo3", func(ctx *gin.Context) {
		var bindArgs struct {
			A string `json:"a,omitempty"`
		}
		if err := ctx.Bind(&bindArgs); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Echo3", "bindArgs"))
			return
		}
		result, err := svc.Echo3(ctx.Request.Context(), bindArgs.A)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.GET("/concat", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var b = ctx.Query("b")
		result, err := svc.Concat0(a, b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/concat1", func(ctx *gin.Context) {
		var a *string
		if s := ctx.Query("a"); s != "" {
			a = &s
		}
		var b *string
		if s := ctx.Query("b"); s != "" {
			b = &s
		}
		result, err := svc.Concat1(a, b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/concat2/:a/:b", func(ctx *gin.Context) {
		var a = ctx.Param("a")
		var b = ctx.Param("b")
		result, err := svc.Concat2(a, b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/concat3/:a/:b", func(ctx *gin.Context) {
		var a = ctx.Param("a")
		var b = ctx.Param("b")
		result, err := svc.Concat3(&a, &b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/sub", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var start int64
		if s := ctx.Query("start"); s != "" {
			startValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Sub", "start"))
				return
			}
			start = startValue
		}
		result, err := svc.Sub(a, start)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.POST("/save/:a", func(ctx *gin.Context) {
		var a = ctx.Param("a")
		var b strings.Builder
		if _, err := io.Copy(&b, ctx.Request.Body); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Save", "b"))
			return
		}
		result, err := svc.Save(a, b.String())
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.POST("/save2/:a", func(ctx *gin.Context) {
		var a = ctx.Param("a")
		var bBuilder strings.Builder
		if _, err := io.Copy(&bBuilder, ctx.Request.Body); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Save2", "bBuilder"))
			return
		}
		var b = bBuilder.String()
		result, err := svc.Save2(&a, &b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.POST("/save3", func(ctx *gin.Context) {
		var bindArgs struct {
			A *string `json:"a,omitempty"`
			B *string `json:"b,omitempty"`
		}
		if err := ctx.Bind(&bindArgs); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Save3", "bindArgs"))
			return
		}
		result, err := svc.Save3(bindArgs.A, bindArgs.B)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.POST("/save4", func(ctx *gin.Context) {
		var bindArgs struct {
			A string `json:"a,omitempty"`
			B string `json:"b,omitempty"`
		}
		if err := ctx.Bind(&bindArgs); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Save4", "bindArgs"))
			return
		}
		result, err := svc.Save4(bindArgs.A, bindArgs.B)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.POST("/save5", func(ctx *gin.Context) {
		var bindArgs struct {
			A string `json:"a,omitempty"`
			B string `json:"b,omitempty"`
		}
		if err := ctx.Bind(&bindArgs); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Save5", "bindArgs"))
			return
		}
		result, err := svc.Save5(ctx.Request.Context(), bindArgs.A, bindArgs.B)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.GET("/add/:a/:b", func(ctx *gin.Context) {
		a, err := strconv.Atoi(ctx.Param("a"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Add1", "a"))
			return
		}
		b, err := strconv.Atoi(ctx.Param("b"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Add1", "b"))
			return
		}
		result, err := svc.Add1(a, b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/add2/:a/:b", func(ctx *gin.Context) {
		a, err := strconv.Atoi(ctx.Param("a"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Add2", "a"))
			return
		}
		b, err := strconv.Atoi(ctx.Param("b"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Add2", "b"))
			return
		}
		result, err := svc.Add2(&a, &b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/add3", func(ctx *gin.Context) {
		var a *int
		if s := ctx.Query("a"); s != "" {
			aValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Add3", "a"))
				return
			}
			a = &aValue
		}
		var b *int
		if s := ctx.Query("b"); s != "" {
			bValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Add3", "b"))
				return
			}
			b = &bValue
		}
		result, err := svc.Add3(a, b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/query1", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var beginAt time.Time
		if s := ctx.Query("begin_at"); s != "" {
			beginAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query1", "begin_at"))
				return
			}
			beginAt = beginAtValue
		}
		var endAt time.Time
		if s := ctx.Query("end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query1", "end_at"))
				return
			}
			endAt = endAtValue
		}
		var isRaw bool
		if s := ctx.Query("is_raw"); s != "" {
			isRawValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query1", "is_raw"))
				return
			}
			isRaw = isRawValue
		}
		result := svc.Query1(a, beginAt, endAt, isRaw)
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/query2/:is_raw", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var beginAt time.Time
		if s := ctx.Query("begin_at"); s != "" {
			beginAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query2", "begin_at"))
				return
			}
			beginAt = beginAtValue
		}
		var endAt time.Time
		if s := ctx.Query("end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query2", "end_at"))
				return
			}
			endAt = endAtValue
		}
		isRaw, err := strconv.ParseBool(ctx.Param("is_raw"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query2", "is_raw"))
			return
		}
		result := svc.Query2(a, beginAt, endAt, isRaw)
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/query3/:is_raw", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var beginAt time.Time
		if s := ctx.Query("begin_at"); s != "" {
			beginAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query3", "begin_at"))
				return
			}
			beginAt = beginAtValue
		}
		var endAt time.Time
		if s := ctx.Query("end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query3", "end_at"))
				return
			}
			endAt = endAtValue
		}
		isRaw, err := strconv.ParseBool(ctx.Param("is_raw"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query3", "is_raw"))
			return
		}
		result := svc.Query3(a, beginAt, endAt, &isRaw)
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/query4/:is_raw", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var createdAt TimeRange
		if s := ctx.Query("created_at.start"); s != "" {
			startValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query4", "created_at.start"))
				return
			}
			createdAt.Start = startValue
		}
		if s := ctx.Query("created_at.end"); s != "" {
			endValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query4", "created_at.end"))
				return
			}
			createdAt.End = endValue
		}
		isRaw, err := strconv.ParseBool(ctx.Param("is_raw"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query4", "is_raw"))
			return
		}
		result := svc.Query4(a, createdAt, &isRaw)
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/query5/:is_raw", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var createdAt *TimeRange
		if s := ctx.Query("created_at.start"); s != "" {
			startValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query5", "created_at.start"))
				return
			}
			createdAt = new(TimeRange)
			createdAt.Start = startValue
		}
		if s := ctx.Query("created_at.end"); s != "" {
			endValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query5", "created_at.end"))
				return
			}
			if createdAt == nil {
				createdAt = new(TimeRange)
			}
			createdAt.End = endValue
		}
		isRaw, err := strconv.ParseBool(ctx.Param("is_raw"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query5", "is_raw"))
			return
		}
		result := svc.Query5(a, createdAt, &isRaw)
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/query6/:is_raw", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var createdAt TimeRange2
		if s := ctx.Query("created_at.start"); s != "" {
			startValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query6", "created_at.start"))
				return
			}
			createdAt.Start = &startValue
		}
		if s := ctx.Query("created_at.end"); s != "" {
			endValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query6", "created_at.end"))
				return
			}
			createdAt.End = &endValue
		}
		isRaw, err := strconv.ParseBool(ctx.Param("is_raw"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query6", "is_raw"))
			return
		}
		result := svc.Query6(a, createdAt, &isRaw)
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/query7/:is_raw", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var createdAt *TimeRange2
		if s := ctx.Query("created_at.start"); s != "" {
			startValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query7", "created_at.start"))
				return
			}
			createdAt = new(TimeRange2)
			createdAt.Start = &startValue
		}
		if s := ctx.Query("created_at.end"); s != "" {
			endValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query7", "created_at.end"))
				return
			}
			if createdAt == nil {
				createdAt = new(TimeRange2)
			}
			createdAt.End = &endValue
		}
		isRaw, err := strconv.ParseBool(ctx.Param("is_raw"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query7", "is_raw"))
			return
		}
		result := svc.Query7(a, createdAt, &isRaw)
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/query8", func(ctx *gin.Context) {
		var itemID int64
		if s := ctx.Query("item_id"); s != "" {
			itemIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.String(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query8", "item_id").Error())
				return
			}
			itemID = itemIDValue
		}
		result, err := svc.Query8(ctx.Request.Context(), itemID)
		if err != nil {
			ctx.String(httpCodeWith(err), err.Error())
			return
		}
		ctx.String(http.StatusOK, result)
		return
	})
	mux.POST("", func(ctx *gin.Context) {
		err := svc.CreateWithNoReturn(ctx.Request.Context(), ctx.Request, ctx.Writer)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		return
	})
	mux.GET("/query9", func(ctx *gin.Context) {
		var itemID sql.NullInt64
		if s := ctx.Query("item_id"); s != "" {
			itemIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.String(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query9", "item_id").Error())
				return
			}
			itemID.Valid = true
			itemID.Int64 = itemIDValue
		}
		result, err := svc.Query9(ctx.Request.Context(), itemID)
		if err != nil {
			ctx.String(httpCodeWith(err), err.Error())
			return
		}
		ctx.String(http.StatusOK, result)
		return
	})
	mux.GET("/query10", func(ctx *gin.Context) {
		var itemID sql.NullString
		if s := ctx.Query("item_id"); s != "" {
			itemID.Valid = true
			itemID.String = s
		}
		result, err := svc.Query10(ctx.Request.Context(), itemID)
		if err != nil {
			ctx.String(httpCodeWith(err), err.Error())
			return
		}
		ctx.String(http.StatusOK, result)
		return
	})
	mux.GET("/query11", func(ctx *gin.Context) {
		var itemID sql.NullBool
		if s := ctx.Query("item_id"); s != "" {
			itemIDValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.String(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Query11", "item_id").Error())
				return
			}
			itemID.Valid = true
			itemID.Bool = itemIDValue
		}
		result, err := svc.Query11(ctx.Request.Context(), itemID)
		if err != nil {
			ctx.String(httpCodeWith(err), err.Error())
			return
		}
		ctx.String(http.StatusOK, result)
		return
	})
	mux.GET("/query12", func(ctx *gin.Context) {
		var Name = ctx.Query("Name")
		result, err := svc.Query1WithUpName(ctx.Request.Context(), Name)
		if err != nil {
			ctx.String(httpCodeWith(err), err.Error())
			return
		}
		ctx.String(http.StatusOK, result)
		return
	})
	mux.POST("/query12", func(ctx *gin.Context) {
		var bindArgs struct {
			Name string `json:"Name,omitempty"`
		}
		if err := ctx.Bind(&bindArgs); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvc.Set1WithUpName", "bindArgs"))
			return
		}
		err := svc.Set1WithUpName(ctx.Request.Context(), bindArgs.Name)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, "OK")
		return
	})
}

func InitStringSvcImpl(mux gin.IRouter, svc *StringSvcImpl) {
	mux.GET("/impl/files", func(ctx *gin.Context) {
		var filenames = ctx.QueryArray("filenames")
		list, total, err := svc.GetFiles(filenames)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		result := map[string]interface{}{
			"list":  list,
			"total": total,
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/impl/times", func(ctx *gin.Context) {
		var times []time.Time
		if ss := ctx.QueryArray("times"); len(ss) != 0 {
			timesValue, err := ToDatetimes(ss)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.GetTimes", "times"))
				return
			}
			times = timesValue
		}
		list, total, err := svc.GetTimes(times)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		result := map[string]interface{}{
			"list":  list,
			"total": total,
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/impl/allfiles", func(ctx *gin.Context) {
		list, total, err := svc.GetAllFiles()
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		result := map[string]interface{}{
			"list":  list,
			"total": total,
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/impl/test_by_key/:key", func(ctx *gin.Context) {
		keyValue, err := strconv.ParseInt(ctx.Param("key"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestByKey1", "key"))
			return
		}
		var key = Key(keyValue)
		err = svc.TestByKey1(key)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/impl/test_by_key", func(ctx *gin.Context) {
		var key Key
		if s := ctx.Query("key"); s != "" {
			keyValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestByKey2", "key"))
				return
			}
			key = Key(keyValue)
		}
		err := svc.TestByKey2(key)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/impl/test_by_strkey/:key", func(ctx *gin.Context) {
		var key = StrKey(ctx.Param("key"))
		err := svc.TestByStrKey1(key)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/impl/test_by_strkey", func(ctx *gin.Context) {
		var key = StrKey(ctx.Query("key"))
		err := svc.TestByStrKey2(key)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/impl/test64/:id", func(ctx *gin.Context) {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestInt64Path", "id"))
			return
		}
		err = svc.TestInt64Path(id)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/impl/test64", func(ctx *gin.Context) {
		var id int64
		if s := ctx.Query("id"); s != "" {
			idValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestInt64Query", "id"))
				return
			}
			id = idValue
		}
		err := svc.TestInt64Query(id)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/impl/test_query_args1/:id", func(ctx *gin.Context) {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs1", "id"))
			return
		}
		var args QueryArgs
		if s := ctx.Query("args.fint"); s != "" {
			fintValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs1", "args.fint"))
				return
			}
			args.Fint = fintValue
		}
		args.Fstring = ctx.Query("args.fstring")
		if s := ctx.Query("args.ftime"); s != "" {
			ftimeValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs1", "args.ftime"))
				return
			}
			args.Ftime = ftimeValue
		}
		if s := ctx.Query("args.fintptr"); s != "" {
			fintptrValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs1", "args.fintptr"))
				return
			}
			args.Fintptr = &fintptrValue
		}
		if s := ctx.Query("args.fstringptr"); s != "" {
			args.Fstringptr = &s
		}
		if s := ctx.Query("args.ftimeptr"); s != "" {
			ftimeptrValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs1", "args.ftimeptr"))
				return
			}
			args.Ftimeptr = &ftimeptrValue
		}
		err = svc.TestQueryArgs1(id, args)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/impl/test_query_args2/:id", func(ctx *gin.Context) {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs2", "id"))
			return
		}
		var args *QueryArgs
		if s := ctx.Query("args.fint"); s != "" {
			fintValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs2", "args.fint"))
				return
			}
			args = new(QueryArgs)
			args.Fint = fintValue
		}
		if s := ctx.Query("args.fstring"); s != "" {
			if args == nil {
				args = new(QueryArgs)
			}
			args.Fstring = ctx.Query("args.fstring")
		}
		if s := ctx.Query("args.ftime"); s != "" {
			ftimeValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs2", "args.ftime"))
				return
			}
			if args == nil {
				args = new(QueryArgs)
			}
			args.Ftime = ftimeValue
		}
		if s := ctx.Query("args.fintptr"); s != "" {
			fintptrValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs2", "args.fintptr"))
				return
			}
			if args == nil {
				args = new(QueryArgs)
			}
			args.Fintptr = &fintptrValue
		}
		if s := ctx.Query("args.fstringptr"); s != "" {
			if args == nil {
				args = new(QueryArgs)
			}
			args.Fstringptr = &s
		}
		if s := ctx.Query("args.ftimeptr"); s != "" {
			ftimeptrValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs2", "args.ftimeptr"))
				return
			}
			if args == nil {
				args = new(QueryArgs)
			}
			args.Ftimeptr = &ftimeptrValue
		}
		err = svc.TestQueryArgs2(id, args)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/impl/test_query_args3/:id", func(ctx *gin.Context) {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs3", "id"))
			return
		}
		var args QueryArgs
		if s := ctx.Query("fint"); s != "" {
			fintValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs3", "fint"))
				return
			}
			args.Fint = fintValue
		}
		args.Fstring = ctx.Query("fstring")
		if s := ctx.Query("ftime"); s != "" {
			ftimeValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs3", "ftime"))
				return
			}
			args.Ftime = ftimeValue
		}
		if s := ctx.Query("fintptr"); s != "" {
			fintptrValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs3", "fintptr"))
				return
			}
			args.Fintptr = &fintptrValue
		}
		if s := ctx.Query("fstringptr"); s != "" {
			args.Fstringptr = &s
		}
		if s := ctx.Query("ftimeptr"); s != "" {
			ftimeptrValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs3", "ftimeptr"))
				return
			}
			args.Ftimeptr = &ftimeptrValue
		}
		err = svc.TestQueryArgs3(id, args)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/impl/test_query_args4/:id", func(ctx *gin.Context) {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs4", "id"))
			return
		}
		var args *QueryArgs
		if s := ctx.Query("fint"); s != "" {
			fintValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs4", "fint"))
				return
			}
			args = new(QueryArgs)
			args.Fint = fintValue
		}
		if s := ctx.Query("fstring"); s != "" {
			if args == nil {
				args = new(QueryArgs)
			}
			args.Fstring = ctx.Query("fstring")
		}
		if s := ctx.Query("ftime"); s != "" {
			ftimeValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs4", "ftime"))
				return
			}
			if args == nil {
				args = new(QueryArgs)
			}
			args.Ftime = ftimeValue
		}
		if s := ctx.Query("fintptr"); s != "" {
			fintptrValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs4", "fintptr"))
				return
			}
			if args == nil {
				args = new(QueryArgs)
			}
			args.Fintptr = &fintptrValue
		}
		if s := ctx.Query("fstringptr"); s != "" {
			if args == nil {
				args = new(QueryArgs)
			}
			args.Fstringptr = &s
		}
		if s := ctx.Query("ftimeptr"); s != "" {
			ftimeptrValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.TestQueryArgs4", "ftimeptr"))
				return
			}
			if args == nil {
				args = new(QueryArgs)
			}
			args.Ftimeptr = &ftimeptrValue
		}
		err = svc.TestQueryArgs4(id, args)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/impl/ping", func(ctx *gin.Context) {
		err := svc.Ping()
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, "OK")
		return
	})
	mux.GET("/impl/echo", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		result := svc.Echo(a)
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.POST("/impl/echo2", func(ctx *gin.Context) {
		result, err := svc.EchoBody(ctx.Request.Body)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.POST("/impl/echo3", func(ctx *gin.Context) {
		var bindArgs struct {
			A string `json:"a,omitempty"`
		}
		if err := ctx.Bind(&bindArgs); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Echo3", "bindArgs"))
			return
		}
		result, err := svc.Echo3(ctx.Request.Context(), bindArgs.A)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.GET("/impl/concat", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var b = ctx.Query("b")
		result, err := svc.Concat0(a, b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/impl/concat1", func(ctx *gin.Context) {
		var a *string
		if s := ctx.Query("a"); s != "" {
			a = &s
		}
		var b *string
		if s := ctx.Query("b"); s != "" {
			b = &s
		}
		result, err := svc.Concat1(a, b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/impl/concat2/:a/:b", func(ctx *gin.Context) {
		var a = ctx.Param("a")
		var b = ctx.Param("b")
		result, err := svc.Concat2(a, b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/impl/concat3/:a/:b", func(ctx *gin.Context) {
		var a = ctx.Param("a")
		var b = ctx.Param("b")
		result, err := svc.Concat3(&a, &b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/impl/sub", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var start int64
		if s := ctx.Query("start"); s != "" {
			startValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Sub", "start"))
				return
			}
			start = startValue
		}
		result, err := svc.Sub(a, start)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.POST("/impl/save/:a", func(ctx *gin.Context) {
		var a = ctx.Param("a")
		var b strings.Builder
		if _, err := io.Copy(&b, ctx.Request.Body); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Save", "b"))
			return
		}
		result, err := svc.Save(a, b.String())
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.POST("/impl/save2/:a", func(ctx *gin.Context) {
		var a = ctx.Param("a")
		var bBuilder strings.Builder
		if _, err := io.Copy(&bBuilder, ctx.Request.Body); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Save2", "bBuilder"))
			return
		}
		var b = bBuilder.String()
		result, err := svc.Save2(&a, &b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.POST("/impl/save3", func(ctx *gin.Context) {
		var bindArgs struct {
			A *string `json:"a,omitempty"`
			B *string `json:"b,omitempty"`
		}
		if err := ctx.Bind(&bindArgs); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Save3", "bindArgs"))
			return
		}
		result, err := svc.Save3(bindArgs.A, bindArgs.B)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.POST("/impl/save4", func(ctx *gin.Context) {
		var bindArgs struct {
			A string `json:"a,omitempty"`
			B string `json:"b,omitempty"`
		}
		if err := ctx.Bind(&bindArgs); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Save4", "bindArgs"))
			return
		}
		result, err := svc.Save4(bindArgs.A, bindArgs.B)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.POST("/impl/save5", func(ctx *gin.Context) {
		var bindArgs struct {
			A string `json:"a,omitempty"`
			B string `json:"b,omitempty"`
		}
		if err := ctx.Bind(&bindArgs); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Save5", "bindArgs"))
			return
		}
		result, err := svc.Save5(ctx.Request.Context(), bindArgs.A, bindArgs.B)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.GET("/impl/add/:a/:b", func(ctx *gin.Context) {
		a, err := strconv.Atoi(ctx.Param("a"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Add1", "a"))
			return
		}
		b, err := strconv.Atoi(ctx.Param("b"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Add1", "b"))
			return
		}
		result, err := svc.Add1(a, b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/impl/add2/:a/:b", func(ctx *gin.Context) {
		a, err := strconv.Atoi(ctx.Param("a"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Add2", "a"))
			return
		}
		b, err := strconv.Atoi(ctx.Param("b"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Add2", "b"))
			return
		}
		result, err := svc.Add2(&a, &b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/impl/add3", func(ctx *gin.Context) {
		var a *int
		if s := ctx.Query("a"); s != "" {
			aValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Add3", "a"))
				return
			}
			a = &aValue
		}
		var b *int
		if s := ctx.Query("b"); s != "" {
			bValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Add3", "b"))
				return
			}
			b = &bValue
		}
		result, err := svc.Add3(a, b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/impl/query1", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var beginAt time.Time
		if s := ctx.Query("begin_at"); s != "" {
			beginAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query1", "begin_at"))
				return
			}
			beginAt = beginAtValue
		}
		var endAt time.Time
		if s := ctx.Query("end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query1", "end_at"))
				return
			}
			endAt = endAtValue
		}
		var isRaw bool
		if s := ctx.Query("is_raw"); s != "" {
			isRawValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query1", "is_raw"))
				return
			}
			isRaw = isRawValue
		}
		result := svc.Query1(a, beginAt, endAt, isRaw)
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/impl/query2/:is_raw", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var beginAt time.Time
		if s := ctx.Query("begin_at"); s != "" {
			beginAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query2", "begin_at"))
				return
			}
			beginAt = beginAtValue
		}
		var endAt time.Time
		if s := ctx.Query("end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query2", "end_at"))
				return
			}
			endAt = endAtValue
		}
		isRaw, err := strconv.ParseBool(ctx.Param("is_raw"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query2", "is_raw"))
			return
		}
		result := svc.Query2(a, beginAt, endAt, isRaw)
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/impl/query3/:is_raw", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var beginAt time.Time
		if s := ctx.Query("begin_at"); s != "" {
			beginAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query3", "begin_at"))
				return
			}
			beginAt = beginAtValue
		}
		var endAt time.Time
		if s := ctx.Query("end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query3", "end_at"))
				return
			}
			endAt = endAtValue
		}
		isRaw, err := strconv.ParseBool(ctx.Param("is_raw"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query3", "is_raw"))
			return
		}
		result := svc.Query3(a, beginAt, endAt, &isRaw)
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/impl/query4/:is_raw", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var createdAt TimeRange
		if s := ctx.Query("created_at.start"); s != "" {
			startValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query4", "created_at.start"))
				return
			}
			createdAt.Start = startValue
		}
		if s := ctx.Query("created_at.end"); s != "" {
			endValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query4", "created_at.end"))
				return
			}
			createdAt.End = endValue
		}
		isRaw, err := strconv.ParseBool(ctx.Param("is_raw"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query4", "is_raw"))
			return
		}
		result := svc.Query4(a, createdAt, &isRaw)
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/impl/query5/:is_raw", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var createdAt *TimeRange
		if s := ctx.Query("created_at.start"); s != "" {
			startValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query5", "created_at.start"))
				return
			}
			createdAt = new(TimeRange)
			createdAt.Start = startValue
		}
		if s := ctx.Query("created_at.end"); s != "" {
			endValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query5", "created_at.end"))
				return
			}
			if createdAt == nil {
				createdAt = new(TimeRange)
			}
			createdAt.End = endValue
		}
		isRaw, err := strconv.ParseBool(ctx.Param("is_raw"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query5", "is_raw"))
			return
		}
		result := svc.Query5(a, createdAt, &isRaw)
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/impl/query6/:is_raw", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var createdAt TimeRange2
		if s := ctx.Query("created_at.start"); s != "" {
			startValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query6", "created_at.start"))
				return
			}
			createdAt.Start = &startValue
		}
		if s := ctx.Query("created_at.end"); s != "" {
			endValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query6", "created_at.end"))
				return
			}
			createdAt.End = &endValue
		}
		isRaw, err := strconv.ParseBool(ctx.Param("is_raw"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query6", "is_raw"))
			return
		}
		result := svc.Query6(a, createdAt, &isRaw)
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/impl/query7/:is_raw", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var createdAt *TimeRange2
		if s := ctx.Query("created_at.start"); s != "" {
			startValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query7", "created_at.start"))
				return
			}
			createdAt = new(TimeRange2)
			createdAt.Start = &startValue
		}
		if s := ctx.Query("created_at.end"); s != "" {
			endValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query7", "created_at.end"))
				return
			}
			if createdAt == nil {
				createdAt = new(TimeRange2)
			}
			createdAt.End = &endValue
		}
		isRaw, err := strconv.ParseBool(ctx.Param("is_raw"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query7", "is_raw"))
			return
		}
		result := svc.Query7(a, createdAt, &isRaw)
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/impl/query8", func(ctx *gin.Context) {
		var itemID int64
		if s := ctx.Query("item_id"); s != "" {
			itemIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.String(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query8", "item_id").Error())
				return
			}
			itemID = itemIDValue
		}
		result, err := svc.Query8(ctx.Request.Context(), itemID)
		if err != nil {
			ctx.String(httpCodeWith(err), err.Error())
			return
		}
		ctx.String(http.StatusOK, result)
		return
	})
	mux.POST("/impl", func(ctx *gin.Context) {
		err := svc.CreateWithNoReturn(ctx.Request.Context(), ctx.Request, ctx.Writer)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		return
	})
	mux.GET("/impl/query9", func(ctx *gin.Context) {
		var itemID sql.NullInt64
		if s := ctx.Query("item_id"); s != "" {
			itemIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.String(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query9", "item_id").Error())
				return
			}
			itemID.Valid = true
			itemID.Int64 = itemIDValue
		}
		result, err := svc.Query9(ctx.Request.Context(), itemID)
		if err != nil {
			ctx.String(httpCodeWith(err), err.Error())
			return
		}
		ctx.String(http.StatusOK, result)
		return
	})
	mux.GET("/impl/query10", func(ctx *gin.Context) {
		var itemID sql.NullString
		if s := ctx.Query("item_id"); s != "" {
			itemID.Valid = true
			itemID.String = s
		}
		result, err := svc.Query10(ctx.Request.Context(), itemID)
		if err != nil {
			ctx.String(httpCodeWith(err), err.Error())
			return
		}
		ctx.String(http.StatusOK, result)
		return
	})
	mux.GET("/impl/query11", func(ctx *gin.Context) {
		var itemID sql.NullBool
		if s := ctx.Query("item_id"); s != "" {
			itemIDValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.String(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Query11", "item_id").Error())
				return
			}
			itemID.Valid = true
			itemID.Bool = itemIDValue
		}
		result, err := svc.Query11(ctx.Request.Context(), itemID)
		if err != nil {
			ctx.String(httpCodeWith(err), err.Error())
			return
		}
		ctx.String(http.StatusOK, result)
		return
	})
	mux.GET("/impl/query12", func(ctx *gin.Context) {
		var Name = ctx.Query("Name")
		result, err := svc.Query1WithUpName(ctx.Request.Context(), Name)
		if err != nil {
			ctx.String(httpCodeWith(err), err.Error())
			return
		}
		ctx.String(http.StatusOK, result)
		return
	})
	mux.POST("/impl/query12", func(ctx *gin.Context) {
		var bindArgs struct {
			Name string `json:"Name,omitempty"`
		}
		if err := ctx.Bind(&bindArgs); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcImpl.Set1WithUpName", "bindArgs"))
			return
		}
		err := svc.Set1WithUpName(ctx.Request.Context(), bindArgs.Name)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, "OK")
		return
	})
}

func InitStringSvcWithContext(mux gin.IRouter, svc *StringSvcWithContext) {
	mux.GET("/ctx/echo", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		result := svc.Echo(ctx.Request.Context(), a)
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.POST("/ctx/echo2", func(ctx *gin.Context) {
		result, err := svc.EchoBody(ctx.Request.Context(), ctx.Request.Body)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.GET("/ctx/concat", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var b = ctx.Query("b")
		result, err := svc.Concat0(ctx.Request.Context(), a, b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/ctx/concat1", func(ctx *gin.Context) {
		var a *string
		if s := ctx.Query("a"); s != "" {
			a = &s
		}
		var b *string
		if s := ctx.Query("b"); s != "" {
			b = &s
		}
		result, err := svc.Concat1(ctx.Request.Context(), a, b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/ctx/concat2/:a/:b", func(ctx *gin.Context) {
		var a = ctx.Param("a")
		var b = ctx.Param("b")
		result, err := svc.Concat2(ctx.Request.Context(), a, b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/ctx/concat3/:a/:b", func(ctx *gin.Context) {
		var a = ctx.Param("a")
		var b = ctx.Param("b")
		result, err := svc.Concat3(ctx.Request.Context(), &a, &b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/ctx/sub", func(ctx *gin.Context) {
		var a = ctx.Query("a")
		var start int64
		if s := ctx.Query("start"); s != "" {
			startValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcWithContext.Sub", "start"))
				return
			}
			start = startValue
		}
		result, err := svc.Sub(ctx.Request.Context(), a, start)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.POST("/ctx/save1/:a", func(ctx *gin.Context) {
		var a = ctx.Param("a")
		var b strings.Builder
		if _, err := io.Copy(&b, ctx.Request.Body); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcWithContext.Save1", "b"))
			return
		}
		result, err := svc.Save1(ctx.Request.Context(), a, b.String())
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.POST("/ctx/save2/:a", func(ctx *gin.Context) {
		var a = ctx.Param("a")
		var bBuilder strings.Builder
		if _, err := io.Copy(&bBuilder, ctx.Request.Body); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcWithContext.Save2", "bBuilder"))
			return
		}
		var b = bBuilder.String()
		result, err := svc.Save2(ctx.Request.Context(), &a, &b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.POST("/ctx/save3", func(ctx *gin.Context) {
		var bindArgs struct {
			A *string `json:"a,omitempty"`
			B *string `json:"b,omitempty"`
		}
		if err := ctx.Bind(&bindArgs); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcWithContext.Save3", "bindArgs"))
			return
		}
		result, err := svc.Save3(bindArgs.A, bindArgs.B)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.GET("/ctx/add1/:a/:b", func(ctx *gin.Context) {
		a, err := strconv.Atoi(ctx.Param("a"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcWithContext.Add1", "a"))
			return
		}
		b, err := strconv.Atoi(ctx.Param("b"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcWithContext.Add1", "b"))
			return
		}
		result, err := svc.Add1(ctx.Request.Context(), a, b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/ctx/add2/:a/:b", func(ctx *gin.Context) {
		a, err := strconv.Atoi(ctx.Param("a"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcWithContext.Add2", "a"))
			return
		}
		b, err := strconv.Atoi(ctx.Param("b"))
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcWithContext.Add2", "b"))
			return
		}
		result, err := svc.Add2(ctx.Request.Context(), &a, &b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/ctx/add3", func(ctx *gin.Context) {
		var a *int
		if s := ctx.Query("a"); s != "" {
			aValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcWithContext.Add3", "a"))
				return
			}
			a = &aValue
		}
		var b *int
		if s := ctx.Query("b"); s != "" {
			bValue, err := strconv.Atoi(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "StringSvcWithContext.Add3", "b"))
				return
			}
			b = &bValue
		}
		result, err := svc.Add3(ctx.Request.Context(), a, b)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
}

// RequestQueryEx1 is skipped
// RequestQueryEx2 is skipped
// RequestQueryEx3 is skipped
// RequestQueryEx4 is skipped
// Sub1 is skipped
// Sub2 is skipped
// Sub3 is skipped
// SubTest1 is skipped
// SubTest2 is skipped
// SubTest3 is skipped
// SubTest4 is skipped

func InitRequests(mux gin.IRouter, svc Requests) {
	mux.GET("/requests/query1", func(ctx *gin.Context) {
		var query *models.RequestQuery
		if s := ctx.Query("query.operator_id"); s != "" {
			operatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query1", "query.operator_id"))
				return
			}
			query = new(models.RequestQuery)
			query.OperatorID = operatorIDValue
		}
		if s := ctx.Query("query.creator_id"); s != "" {
			creatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query1", "query.creator_id"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.CreatorID = creatorIDValue
		}
		if s := ctx.Query("query.requester_id"); s != "" {
			requesterIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query1", "query.requester_id"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.RequesterID = requesterIDValue
		}
		if ss := ctx.QueryArray("query.request_type_ids"); len(ss) != 0 {
			requestTypeIDsValue, err := ToInt64Array(ss)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query1", "query.request_type_ids"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.RequestTypeIDs = requestTypeIDsValue
		}
		if ss := ctx.QueryArray("query.request_type_names"); len(ss) != 0 {
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.RequestTypeNames = ctx.QueryArray("query.request_type_names")
		}
		if s := ctx.Query("query.name_like"); s != "" {
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.NameLike = ctx.Query("query.name_like")
		}
		if s := ctx.Query("query.current_status"); s != "" {
			currentStatusValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query1", "query.current_status"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.CurrentStatus = currentStatusValue
		}
		if s := ctx.Query("query.is_unclosed"); s != "" {
			isUnclosedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query1", "query.is_unclosed"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.IsUnclosed.Valid = true
			query.IsUnclosed.Bool = isUnclosedValue
		}
		if s := ctx.Query("query.is_overdued"); s != "" {
			isOverduedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query1", "query.is_overdued"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.IsOverdued.Valid = true
			query.IsOverdued.Bool = isOverduedValue
		}
		if s := ctx.Query("query.is_suspend"); s != "" {
			isSuspendValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query1", "query.is_suspend"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.IsSuspend.Valid = true
			query.IsSuspend.Bool = isSuspendValue
		}
		if s := ctx.Query("query.start_at"); s != "" {
			startAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query1", "query.start_at"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.StartAt = startAtValue
		}
		if s := ctx.Query("query.end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query1", "query.end_at"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.EndAt = endAtValue
		}
		if s := ctx.Query("query.overdue_start"); s != "" {
			overdueStartValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query1", "query.overdue_start"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.OverdueStart = overdueStartValue
		}
		if s := ctx.Query("query.overdue_end"); s != "" {
			overdueEndValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query1", "query.overdue_end"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.OverdueEnd = overdueEndValue
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "query.settings.") {
				continue
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			if query.Settings == nil {
				query.Settings = map[string]string{}
			}
			query.Settings[strings.TrimPrefix(key, "query.settings.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "query.ttargstt.") {
				continue
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			if query.Args == nil {
				query.Args = map[string]string{}
			}
			query.Args[strings.TrimPrefix(key, "query.ttargstt.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "query.") {
				continue
			}
			if key == "query.operator_id" ||
				key == "query.creator_id" ||
				key == "query.requester_id" ||
				key == "query.request_type_ids" ||
				key == "query.request_type_names" ||
				key == "query.name_like" ||
				key == "query.current_status" ||
				key == "query.is_unclosed" ||
				key == "query.is_overdued" ||
				key == "query.is_suspend" ||
				key == "query.start_at" ||
				key == "query.end_at" ||
				key == "query.overdue_start" ||
				key == "query.overdue_end" ||
				strings.HasPrefix(key, "query.settings.") ||
				strings.HasPrefix(key, "query.ttargstt.") {
				continue
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			if query.Values == nil {
				query.Values = url.Values{}
			}
			query.Values[strings.TrimPrefix(key, "query.")] = values
		}
		var offset int64
		if s := ctx.Query("offset"); s != "" {
			offsetValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query1", "offset"))
				return
			}
			offset = offsetValue
		}
		var limit int64
		if s := ctx.Query("limit"); s != "" {
			limitValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query1", "limit"))
				return
			}
			limit = limitValue
		}
		var params = map[string]string{}
		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "params.") {
				continue
			}
			params[strings.TrimPrefix(key, "params.")] = values[len(values)-1]
		}
		result, err := svc.Query1(ctx.Request.Context(), query, offset, limit, params)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/requests/query2", func(ctx *gin.Context) {
		var query *models.RequestQuery
		if s := ctx.Query("operator_id"); s != "" {
			operatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query2", "operator_id"))
				return
			}
			query = new(models.RequestQuery)
			query.OperatorID = operatorIDValue
		}
		if s := ctx.Query("creator_id"); s != "" {
			creatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query2", "creator_id"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.CreatorID = creatorIDValue
		}
		if s := ctx.Query("requester_id"); s != "" {
			requesterIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query2", "requester_id"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.RequesterID = requesterIDValue
		}
		if ss := ctx.QueryArray("request_type_ids"); len(ss) != 0 {
			requestTypeIDsValue, err := ToInt64Array(ss)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query2", "request_type_ids"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.RequestTypeIDs = requestTypeIDsValue
		}
		if ss := ctx.QueryArray("request_type_names"); len(ss) != 0 {
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.RequestTypeNames = ctx.QueryArray("request_type_names")
		}
		if s := ctx.Query("name_like"); s != "" {
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.NameLike = ctx.Query("name_like")
		}
		if s := ctx.Query("current_status"); s != "" {
			currentStatusValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query2", "current_status"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.CurrentStatus = currentStatusValue
		}
		if s := ctx.Query("is_unclosed"); s != "" {
			isUnclosedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query2", "is_unclosed"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.IsUnclosed.Valid = true
			query.IsUnclosed.Bool = isUnclosedValue
		}
		if s := ctx.Query("is_overdued"); s != "" {
			isOverduedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query2", "is_overdued"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.IsOverdued.Valid = true
			query.IsOverdued.Bool = isOverduedValue
		}
		if s := ctx.Query("is_suspend"); s != "" {
			isSuspendValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query2", "is_suspend"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.IsSuspend.Valid = true
			query.IsSuspend.Bool = isSuspendValue
		}
		if s := ctx.Query("start_at"); s != "" {
			startAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query2", "start_at"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.StartAt = startAtValue
		}
		if s := ctx.Query("end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query2", "end_at"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.EndAt = endAtValue
		}
		if s := ctx.Query("overdue_start"); s != "" {
			overdueStartValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query2", "overdue_start"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.OverdueStart = overdueStartValue
		}
		if s := ctx.Query("overdue_end"); s != "" {
			overdueEndValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query2", "overdue_end"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.OverdueEnd = overdueEndValue
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "settings.") {
				continue
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			if query.Settings == nil {
				query.Settings = map[string]string{}
			}
			query.Settings[strings.TrimPrefix(key, "settings.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "ttargstt.") {
				continue
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			if query.Args == nil {
				query.Args = map[string]string{}
			}
			query.Args[strings.TrimPrefix(key, "ttargstt.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if key == "operator_id" ||
				key == "creator_id" ||
				key == "requester_id" ||
				key == "request_type_ids" ||
				key == "request_type_names" ||
				key == "name_like" ||
				key == "current_status" ||
				key == "is_unclosed" ||
				key == "is_overdued" ||
				key == "is_suspend" ||
				key == "start_at" ||
				key == "end_at" ||
				key == "overdue_start" ||
				key == "overdue_end" ||
				strings.HasPrefix(key, "settings.") ||
				strings.HasPrefix(key, "ttargstt.") ||
				key == "offset" ||
				key == "limit" {
				continue
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			if query.Values == nil {
				query.Values = url.Values{}
			}
			query.Values[key] = values
		}
		var offset int64
		if s := ctx.Query("offset"); s != "" {
			offsetValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query2", "offset"))
				return
			}
			offset = offsetValue
		}
		var limit int64
		if s := ctx.Query("limit"); s != "" {
			limitValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query2", "limit"))
				return
			}
			limit = limitValue
		}
		result, err := svc.Query2(ctx.Request.Context(), query, offset, limit)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/requests/query3", func(ctx *gin.Context) {
		var query *AliasRequestQuery
		if s := ctx.Query("operator_id"); s != "" {
			operatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query3", "operator_id"))
				return
			}
			query = new(AliasRequestQuery)
			query.OperatorID = operatorIDValue
		}
		if s := ctx.Query("creator_id"); s != "" {
			creatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query3", "creator_id"))
				return
			}
			if query == nil {
				query = new(AliasRequestQuery)
			}
			query.CreatorID = creatorIDValue
		}
		if s := ctx.Query("requester_id"); s != "" {
			requesterIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query3", "requester_id"))
				return
			}
			if query == nil {
				query = new(AliasRequestQuery)
			}
			query.RequesterID = requesterIDValue
		}
		if ss := ctx.QueryArray("request_type_ids"); len(ss) != 0 {
			requestTypeIDsValue, err := ToInt64Array(ss)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query3", "request_type_ids"))
				return
			}
			if query == nil {
				query = new(AliasRequestQuery)
			}
			query.RequestTypeIDs = requestTypeIDsValue
		}
		if ss := ctx.QueryArray("request_type_names"); len(ss) != 0 {
			if query == nil {
				query = new(AliasRequestQuery)
			}
			query.RequestTypeNames = ctx.QueryArray("request_type_names")
		}
		if s := ctx.Query("name_like"); s != "" {
			if query == nil {
				query = new(AliasRequestQuery)
			}
			query.NameLike = ctx.Query("name_like")
		}
		if s := ctx.Query("current_status"); s != "" {
			currentStatusValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query3", "current_status"))
				return
			}
			if query == nil {
				query = new(AliasRequestQuery)
			}
			query.CurrentStatus = currentStatusValue
		}
		if s := ctx.Query("is_unclosed"); s != "" {
			isUnclosedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query3", "is_unclosed"))
				return
			}
			if query == nil {
				query = new(AliasRequestQuery)
			}
			query.IsUnclosed.Valid = true
			query.IsUnclosed.Bool = isUnclosedValue
		}
		if s := ctx.Query("is_overdued"); s != "" {
			isOverduedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query3", "is_overdued"))
				return
			}
			if query == nil {
				query = new(AliasRequestQuery)
			}
			query.IsOverdued.Valid = true
			query.IsOverdued.Bool = isOverduedValue
		}
		if s := ctx.Query("is_suspend"); s != "" {
			isSuspendValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query3", "is_suspend"))
				return
			}
			if query == nil {
				query = new(AliasRequestQuery)
			}
			query.IsSuspend.Valid = true
			query.IsSuspend.Bool = isSuspendValue
		}
		if s := ctx.Query("start_at"); s != "" {
			startAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query3", "start_at"))
				return
			}
			if query == nil {
				query = new(AliasRequestQuery)
			}
			query.StartAt = startAtValue
		}
		if s := ctx.Query("end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query3", "end_at"))
				return
			}
			if query == nil {
				query = new(AliasRequestQuery)
			}
			query.EndAt = endAtValue
		}
		if s := ctx.Query("overdue_start"); s != "" {
			overdueStartValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query3", "overdue_start"))
				return
			}
			if query == nil {
				query = new(AliasRequestQuery)
			}
			query.OverdueStart = overdueStartValue
		}
		if s := ctx.Query("overdue_end"); s != "" {
			overdueEndValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query3", "overdue_end"))
				return
			}
			if query == nil {
				query = new(AliasRequestQuery)
			}
			query.OverdueEnd = overdueEndValue
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "settings.") {
				continue
			}
			if query == nil {
				query = new(AliasRequestQuery)
			}
			if query.Settings == nil {
				query.Settings = map[string]string{}
			}
			query.Settings[strings.TrimPrefix(key, "settings.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "ttargstt.") {
				continue
			}
			if query == nil {
				query = new(AliasRequestQuery)
			}
			if query.Args == nil {
				query.Args = map[string]string{}
			}
			query.Args[strings.TrimPrefix(key, "ttargstt.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if key == "operator_id" ||
				key == "creator_id" ||
				key == "requester_id" ||
				key == "request_type_ids" ||
				key == "request_type_names" ||
				key == "name_like" ||
				key == "current_status" ||
				key == "is_unclosed" ||
				key == "is_overdued" ||
				key == "is_suspend" ||
				key == "start_at" ||
				key == "end_at" ||
				key == "overdue_start" ||
				key == "overdue_end" ||
				strings.HasPrefix(key, "settings.") ||
				strings.HasPrefix(key, "ttargstt.") ||
				key == "offset" ||
				key == "limit" {
				continue
			}
			if query == nil {
				query = new(AliasRequestQuery)
			}
			if query.Values == nil {
				query.Values = url.Values{}
			}
			query.Values[key] = values
		}
		var offset int64
		if s := ctx.Query("offset"); s != "" {
			offsetValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query3", "offset"))
				return
			}
			offset = offsetValue
		}
		var limit int64
		if s := ctx.Query("limit"); s != "" {
			limitValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Query3", "limit"))
				return
			}
			limit = limitValue
		}
		result, err := svc.Query3(ctx.Request.Context(), query, offset, limit)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/requests/queryex1", func(ctx *gin.Context) {
		var query *RequestQueryEx1
		if s := ctx.Query("query.ex_arg"); s != "" {
			query = new(RequestQueryEx1)
			query.ExArg = ctx.Query("query.ex_arg")
		}
		if s := ctx.Query("query.operator_id"); s != "" {
			operatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx1", "query.operator_id"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx1)
			}
			query.RequestQuery.OperatorID = operatorIDValue
		}
		if s := ctx.Query("query.creator_id"); s != "" {
			creatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx1", "query.creator_id"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx1)
			}
			query.RequestQuery.CreatorID = creatorIDValue
		}
		if s := ctx.Query("query.requester_id"); s != "" {
			requesterIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx1", "query.requester_id"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx1)
			}
			query.RequestQuery.RequesterID = requesterIDValue
		}
		if ss := ctx.QueryArray("query.request_type_ids"); len(ss) != 0 {
			requestTypeIDsValue, err := ToInt64Array(ss)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx1", "query.request_type_ids"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx1)
			}
			query.RequestQuery.RequestTypeIDs = requestTypeIDsValue
		}
		if ss := ctx.QueryArray("query.request_type_names"); len(ss) != 0 {
			if query == nil {
				query = new(RequestQueryEx1)
			}
			query.RequestQuery.RequestTypeNames = ctx.QueryArray("query.request_type_names")
		}
		if s := ctx.Query("query.name_like"); s != "" {
			if query == nil {
				query = new(RequestQueryEx1)
			}
			query.RequestQuery.NameLike = ctx.Query("query.name_like")
		}
		if s := ctx.Query("query.current_status"); s != "" {
			currentStatusValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx1", "query.current_status"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx1)
			}
			query.RequestQuery.CurrentStatus = currentStatusValue
		}
		if s := ctx.Query("query.is_unclosed"); s != "" {
			isUnclosedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx1", "query.is_unclosed"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx1)
			}
			query.RequestQuery.IsUnclosed.Valid = true
			query.RequestQuery.IsUnclosed.Bool = isUnclosedValue
		}
		if s := ctx.Query("query.is_overdued"); s != "" {
			isOverduedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx1", "query.is_overdued"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx1)
			}
			query.RequestQuery.IsOverdued.Valid = true
			query.RequestQuery.IsOverdued.Bool = isOverduedValue
		}
		if s := ctx.Query("query.is_suspend"); s != "" {
			isSuspendValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx1", "query.is_suspend"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx1)
			}
			query.RequestQuery.IsSuspend.Valid = true
			query.RequestQuery.IsSuspend.Bool = isSuspendValue
		}
		if s := ctx.Query("query.start_at"); s != "" {
			startAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx1", "query.start_at"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx1)
			}
			query.RequestQuery.StartAt = startAtValue
		}
		if s := ctx.Query("query.end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx1", "query.end_at"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx1)
			}
			query.RequestQuery.EndAt = endAtValue
		}
		if s := ctx.Query("query.overdue_start"); s != "" {
			overdueStartValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx1", "query.overdue_start"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx1)
			}
			query.RequestQuery.OverdueStart = overdueStartValue
		}
		if s := ctx.Query("query.overdue_end"); s != "" {
			overdueEndValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx1", "query.overdue_end"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx1)
			}
			query.RequestQuery.OverdueEnd = overdueEndValue
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "query.settings.") {
				continue
			}
			if query == nil {
				query = new(RequestQueryEx1)
			}
			if query.Settings == nil {
				query.Settings = map[string]string{}
			}
			query.Settings[strings.TrimPrefix(key, "query.settings.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "query.ttargstt.") {
				continue
			}
			if query == nil {
				query = new(RequestQueryEx1)
			}
			if query.Args == nil {
				query.Args = map[string]string{}
			}
			query.Args[strings.TrimPrefix(key, "query.ttargstt.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "query.") {
				continue
			}
			if key == "query.ex_arg" ||
				key == "query.operator_id" ||
				key == "query.creator_id" ||
				key == "query.requester_id" ||
				key == "query.request_type_ids" ||
				key == "query.request_type_names" ||
				key == "query.name_like" ||
				key == "query.current_status" ||
				key == "query.is_unclosed" ||
				key == "query.is_overdued" ||
				key == "query.is_suspend" ||
				key == "query.start_at" ||
				key == "query.end_at" ||
				key == "query.overdue_start" ||
				key == "query.overdue_end" ||
				strings.HasPrefix(key, "query.settings.") ||
				strings.HasPrefix(key, "query.ttargstt.") {
				continue
			}
			if query == nil {
				query = new(RequestQueryEx1)
			}
			if query.Values == nil {
				query.Values = url.Values{}
			}
			query.Values[strings.TrimPrefix(key, "query.")] = values
		}
		var offset int64
		if s := ctx.Query("offset"); s != "" {
			offsetValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx1", "offset"))
				return
			}
			offset = offsetValue
		}
		var limit int64
		if s := ctx.Query("limit"); s != "" {
			limitValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx1", "limit"))
				return
			}
			limit = limitValue
		}
		var params = map[string]string{}
		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "params.") {
				continue
			}
			params[strings.TrimPrefix(key, "params.")] = values[len(values)-1]
		}
		result, err := svc.QueryEx1(ctx.Request.Context(), query, offset, limit, params)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/requests/queryex2", func(ctx *gin.Context) {
		var query *RequestQueryEx2
		if s := ctx.Query("query.ex_arg"); s != "" {
			query = new(RequestQueryEx2)
			query.ExArg = ctx.Query("query.ex_arg")
		}
		if s := ctx.Query("query.operator_id"); s != "" {
			operatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx2", "query.operator_id"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx2)
			}
			query.RequestQuery = new(models.RequestQuery)
			query.RequestQuery.OperatorID = operatorIDValue
		}
		if s := ctx.Query("query.creator_id"); s != "" {
			creatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx2", "query.creator_id"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx2)
			}
			if query.RequestQuery == nil {
				query.RequestQuery = new(models.RequestQuery)
			}
			query.RequestQuery.CreatorID = creatorIDValue
		}
		if s := ctx.Query("query.requester_id"); s != "" {
			requesterIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx2", "query.requester_id"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx2)
			}
			if query.RequestQuery == nil {
				query.RequestQuery = new(models.RequestQuery)
			}
			query.RequestQuery.RequesterID = requesterIDValue
		}
		if ss := ctx.QueryArray("query.request_type_ids"); len(ss) != 0 {
			requestTypeIDsValue, err := ToInt64Array(ss)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx2", "query.request_type_ids"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx2)
			}
			if query.RequestQuery == nil {
				query.RequestQuery = new(models.RequestQuery)
			}
			query.RequestQuery.RequestTypeIDs = requestTypeIDsValue
		}
		if ss := ctx.QueryArray("query.request_type_names"); len(ss) != 0 {
			if query == nil {
				query = new(RequestQueryEx2)
			}
			if query.RequestQuery == nil {
				query.RequestQuery = new(models.RequestQuery)
			}
			query.RequestQuery.RequestTypeNames = ctx.QueryArray("query.request_type_names")
		}
		if s := ctx.Query("query.name_like"); s != "" {
			if query == nil {
				query = new(RequestQueryEx2)
			}
			if query.RequestQuery == nil {
				query.RequestQuery = new(models.RequestQuery)
			}
			query.RequestQuery.NameLike = ctx.Query("query.name_like")
		}
		if s := ctx.Query("query.current_status"); s != "" {
			currentStatusValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx2", "query.current_status"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx2)
			}
			if query.RequestQuery == nil {
				query.RequestQuery = new(models.RequestQuery)
			}
			query.RequestQuery.CurrentStatus = currentStatusValue
		}
		if s := ctx.Query("query.is_unclosed"); s != "" {
			isUnclosedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx2", "query.is_unclosed"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx2)
			}
			if query.RequestQuery == nil {
				query.RequestQuery = new(models.RequestQuery)
			}
			query.RequestQuery.IsUnclosed.Valid = true
			query.RequestQuery.IsUnclosed.Bool = isUnclosedValue
		}
		if s := ctx.Query("query.is_overdued"); s != "" {
			isOverduedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx2", "query.is_overdued"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx2)
			}
			if query.RequestQuery == nil {
				query.RequestQuery = new(models.RequestQuery)
			}
			query.RequestQuery.IsOverdued.Valid = true
			query.RequestQuery.IsOverdued.Bool = isOverduedValue
		}
		if s := ctx.Query("query.is_suspend"); s != "" {
			isSuspendValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx2", "query.is_suspend"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx2)
			}
			if query.RequestQuery == nil {
				query.RequestQuery = new(models.RequestQuery)
			}
			query.RequestQuery.IsSuspend.Valid = true
			query.RequestQuery.IsSuspend.Bool = isSuspendValue
		}
		if s := ctx.Query("query.start_at"); s != "" {
			startAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx2", "query.start_at"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx2)
			}
			if query.RequestQuery == nil {
				query.RequestQuery = new(models.RequestQuery)
			}
			query.RequestQuery.StartAt = startAtValue
		}
		if s := ctx.Query("query.end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx2", "query.end_at"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx2)
			}
			if query.RequestQuery == nil {
				query.RequestQuery = new(models.RequestQuery)
			}
			query.RequestQuery.EndAt = endAtValue
		}
		if s := ctx.Query("query.overdue_start"); s != "" {
			overdueStartValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx2", "query.overdue_start"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx2)
			}
			if query.RequestQuery == nil {
				query.RequestQuery = new(models.RequestQuery)
			}
			query.RequestQuery.OverdueStart = overdueStartValue
		}
		if s := ctx.Query("query.overdue_end"); s != "" {
			overdueEndValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx2", "query.overdue_end"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx2)
			}
			if query.RequestQuery == nil {
				query.RequestQuery = new(models.RequestQuery)
			}
			query.RequestQuery.OverdueEnd = overdueEndValue
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "query.settings.") {
				continue
			}
			if query == nil {
				query = new(RequestQueryEx2)
			}
			if query.RequestQuery == nil {
				query.RequestQuery = new(models.RequestQuery)
			}
			if query.Settings == nil {
				query.Settings = map[string]string{}
			}
			query.Settings[strings.TrimPrefix(key, "query.settings.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "query.ttargstt.") {
				continue
			}
			if query == nil {
				query = new(RequestQueryEx2)
			}
			if query.RequestQuery == nil {
				query.RequestQuery = new(models.RequestQuery)
			}
			if query.Args == nil {
				query.Args = map[string]string{}
			}
			query.Args[strings.TrimPrefix(key, "query.ttargstt.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "query.") {
				continue
			}
			if key == "query.ex_arg" ||
				key == "query.operator_id" ||
				key == "query.creator_id" ||
				key == "query.requester_id" ||
				key == "query.request_type_ids" ||
				key == "query.request_type_names" ||
				key == "query.name_like" ||
				key == "query.current_status" ||
				key == "query.is_unclosed" ||
				key == "query.is_overdued" ||
				key == "query.is_suspend" ||
				key == "query.start_at" ||
				key == "query.end_at" ||
				key == "query.overdue_start" ||
				key == "query.overdue_end" ||
				strings.HasPrefix(key, "query.settings.") ||
				strings.HasPrefix(key, "query.ttargstt.") {
				continue
			}
			if query == nil {
				query = new(RequestQueryEx2)
			}
			if query.RequestQuery == nil {
				query.RequestQuery = new(models.RequestQuery)
			}
			if query.Values == nil {
				query.Values = url.Values{}
			}
			query.Values[strings.TrimPrefix(key, "query.")] = values
		}
		var offset int64
		if s := ctx.Query("offset"); s != "" {
			offsetValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx2", "offset"))
				return
			}
			offset = offsetValue
		}
		var limit int64
		if s := ctx.Query("limit"); s != "" {
			limitValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx2", "limit"))
				return
			}
			limit = limitValue
		}
		var params = map[string]string{}
		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "params.") {
				continue
			}
			params[strings.TrimPrefix(key, "params.")] = values[len(values)-1]
		}
		result, err := svc.QueryEx2(ctx.Request.Context(), query, offset, limit, params)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/requests/queryex3", func(ctx *gin.Context) {
		var query *RequestQueryEx3
		if s := ctx.Query("query.request.operator_id"); s != "" {
			operatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3", "query.request.operator_id"))
				return
			}
			query = new(RequestQueryEx3)
			query.Request.OperatorID = operatorIDValue
		}
		if s := ctx.Query("query.request.creator_id"); s != "" {
			creatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3", "query.request.creator_id"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.CreatorID = creatorIDValue
		}
		if s := ctx.Query("query.request.requester_id"); s != "" {
			requesterIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3", "query.request.requester_id"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.RequesterID = requesterIDValue
		}
		if ss := ctx.QueryArray("query.request.request_type_ids"); len(ss) != 0 {
			requestTypeIDsValue, err := ToInt64Array(ss)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3", "query.request.request_type_ids"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.RequestTypeIDs = requestTypeIDsValue
		}
		if ss := ctx.QueryArray("query.request.request_type_names"); len(ss) != 0 {
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.RequestTypeNames = ctx.QueryArray("query.request.request_type_names")
		}
		if s := ctx.Query("query.request.name_like"); s != "" {
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.NameLike = ctx.Query("query.request.name_like")
		}
		if s := ctx.Query("query.request.current_status"); s != "" {
			currentStatusValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3", "query.request.current_status"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.CurrentStatus = currentStatusValue
		}
		if s := ctx.Query("query.request.is_unclosed"); s != "" {
			isUnclosedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3", "query.request.is_unclosed"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.IsUnclosed.Valid = true
			query.Request.IsUnclosed.Bool = isUnclosedValue
		}
		if s := ctx.Query("query.request.is_overdued"); s != "" {
			isOverduedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3", "query.request.is_overdued"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.IsOverdued.Valid = true
			query.Request.IsOverdued.Bool = isOverduedValue
		}
		if s := ctx.Query("query.request.is_suspend"); s != "" {
			isSuspendValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3", "query.request.is_suspend"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.IsSuspend.Valid = true
			query.Request.IsSuspend.Bool = isSuspendValue
		}
		if s := ctx.Query("query.request.start_at"); s != "" {
			startAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3", "query.request.start_at"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.StartAt = startAtValue
		}
		if s := ctx.Query("query.request.end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3", "query.request.end_at"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.EndAt = endAtValue
		}
		if s := ctx.Query("query.request.overdue_start"); s != "" {
			overdueStartValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3", "query.request.overdue_start"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.OverdueStart = overdueStartValue
		}
		if s := ctx.Query("query.request.overdue_end"); s != "" {
			overdueEndValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3", "query.request.overdue_end"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.OverdueEnd = overdueEndValue
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "query.request.settings.") {
				continue
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			if query.Request.Settings == nil {
				query.Request.Settings = map[string]string{}
			}
			query.Request.Settings[strings.TrimPrefix(key, "query.request.settings.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "query.request.ttargstt.") {
				continue
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			if query.Request.Args == nil {
				query.Request.Args = map[string]string{}
			}
			query.Request.Args[strings.TrimPrefix(key, "query.request.ttargstt.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "query.request.") {
				continue
			}
			if key == "query.request.operator_id" ||
				key == "query.request.creator_id" ||
				key == "query.request.requester_id" ||
				key == "query.request.request_type_ids" ||
				key == "query.request.request_type_names" ||
				key == "query.request.name_like" ||
				key == "query.request.current_status" ||
				key == "query.request.is_unclosed" ||
				key == "query.request.is_overdued" ||
				key == "query.request.is_suspend" ||
				key == "query.request.start_at" ||
				key == "query.request.end_at" ||
				key == "query.request.overdue_start" ||
				key == "query.request.overdue_end" ||
				strings.HasPrefix(key, "query.request.settings.") ||
				strings.HasPrefix(key, "query.request.ttargstt.") {
				continue
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			if query.Request.Values == nil {
				query.Request.Values = url.Values{}
			}
			query.Request.Values[strings.TrimPrefix(key, "query.request.")] = values
		}
		if s := ctx.Query("query.ex_arg"); s != "" {
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.ExArg = ctx.Query("query.ex_arg")
		}
		var offset int64
		if s := ctx.Query("offset"); s != "" {
			offsetValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3", "offset"))
				return
			}
			offset = offsetValue
		}
		var limit int64
		if s := ctx.Query("limit"); s != "" {
			limitValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3", "limit"))
				return
			}
			limit = limitValue
		}
		var params = map[string]string{}
		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "params.") {
				continue
			}
			params[strings.TrimPrefix(key, "params.")] = values[len(values)-1]
		}
		result, err := svc.QueryEx3(ctx.Request.Context(), query, offset, limit, params)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/requests/queryex4", func(ctx *gin.Context) {
		var query *RequestQueryEx4
		if s := ctx.Query("query.request.operator_id"); s != "" {
			operatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4", "query.request.operator_id"))
				return
			}
			query = new(RequestQueryEx4)
			query.Request = new(models.RequestQuery)
			query.Request.OperatorID = operatorIDValue
		}
		if s := ctx.Query("query.request.creator_id"); s != "" {
			creatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4", "query.request.creator_id"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.CreatorID = creatorIDValue
		}
		if s := ctx.Query("query.request.requester_id"); s != "" {
			requesterIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4", "query.request.requester_id"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.RequesterID = requesterIDValue
		}
		if ss := ctx.QueryArray("query.request.request_type_ids"); len(ss) != 0 {
			requestTypeIDsValue, err := ToInt64Array(ss)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4", "query.request.request_type_ids"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.RequestTypeIDs = requestTypeIDsValue
		}
		if ss := ctx.QueryArray("query.request.request_type_names"); len(ss) != 0 {
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.RequestTypeNames = ctx.QueryArray("query.request.request_type_names")
		}
		if s := ctx.Query("query.request.name_like"); s != "" {
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.NameLike = ctx.Query("query.request.name_like")
		}
		if s := ctx.Query("query.request.current_status"); s != "" {
			currentStatusValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4", "query.request.current_status"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.CurrentStatus = currentStatusValue
		}
		if s := ctx.Query("query.request.is_unclosed"); s != "" {
			isUnclosedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4", "query.request.is_unclosed"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.IsUnclosed.Valid = true
			query.Request.IsUnclosed.Bool = isUnclosedValue
		}
		if s := ctx.Query("query.request.is_overdued"); s != "" {
			isOverduedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4", "query.request.is_overdued"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.IsOverdued.Valid = true
			query.Request.IsOverdued.Bool = isOverduedValue
		}
		if s := ctx.Query("query.request.is_suspend"); s != "" {
			isSuspendValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4", "query.request.is_suspend"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.IsSuspend.Valid = true
			query.Request.IsSuspend.Bool = isSuspendValue
		}
		if s := ctx.Query("query.request.start_at"); s != "" {
			startAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4", "query.request.start_at"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.StartAt = startAtValue
		}
		if s := ctx.Query("query.request.end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4", "query.request.end_at"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.EndAt = endAtValue
		}
		if s := ctx.Query("query.request.overdue_start"); s != "" {
			overdueStartValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4", "query.request.overdue_start"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.OverdueStart = overdueStartValue
		}
		if s := ctx.Query("query.request.overdue_end"); s != "" {
			overdueEndValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4", "query.request.overdue_end"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.OverdueEnd = overdueEndValue
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "query.request.settings.") {
				continue
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			if query.Request.Settings == nil {
				query.Request.Settings = map[string]string{}
			}
			query.Request.Settings[strings.TrimPrefix(key, "query.request.settings.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "query.request.ttargstt.") {
				continue
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			if query.Request.Args == nil {
				query.Request.Args = map[string]string{}
			}
			query.Request.Args[strings.TrimPrefix(key, "query.request.ttargstt.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "query.request.") {
				continue
			}
			if key == "query.request.operator_id" ||
				key == "query.request.creator_id" ||
				key == "query.request.requester_id" ||
				key == "query.request.request_type_ids" ||
				key == "query.request.request_type_names" ||
				key == "query.request.name_like" ||
				key == "query.request.current_status" ||
				key == "query.request.is_unclosed" ||
				key == "query.request.is_overdued" ||
				key == "query.request.is_suspend" ||
				key == "query.request.start_at" ||
				key == "query.request.end_at" ||
				key == "query.request.overdue_start" ||
				key == "query.request.overdue_end" ||
				strings.HasPrefix(key, "query.request.settings.") ||
				strings.HasPrefix(key, "query.request.ttargstt.") {
				continue
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			if query.Request.Values == nil {
				query.Request.Values = url.Values{}
			}
			query.Request.Values[strings.TrimPrefix(key, "query.request.")] = values
		}
		if s := ctx.Query("query.ex_arg"); s != "" {
			if query == nil {
				query = new(RequestQueryEx4)
			}
			query.ExArg = ctx.Query("query.ex_arg")
		}
		var offset int64
		if s := ctx.Query("offset"); s != "" {
			offsetValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4", "offset"))
				return
			}
			offset = offsetValue
		}
		var limit int64
		if s := ctx.Query("limit"); s != "" {
			limitValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4", "limit"))
				return
			}
			limit = limitValue
		}
		var params = map[string]string{}
		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "params.") {
				continue
			}
			params[strings.TrimPrefix(key, "params.")] = values[len(values)-1]
		}
		result, err := svc.QueryEx4(ctx.Request.Context(), query, offset, limit, params)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/requests/queryex3/NoPrefix", func(ctx *gin.Context) {
		var query *RequestQueryEx3
		if s := ctx.Query("request.operator_id"); s != "" {
			operatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3NoPrefix", "request.operator_id"))
				return
			}
			query = new(RequestQueryEx3)
			query.Request.OperatorID = operatorIDValue
		}
		if s := ctx.Query("request.creator_id"); s != "" {
			creatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3NoPrefix", "request.creator_id"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.CreatorID = creatorIDValue
		}
		if s := ctx.Query("request.requester_id"); s != "" {
			requesterIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3NoPrefix", "request.requester_id"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.RequesterID = requesterIDValue
		}
		if ss := ctx.QueryArray("request.request_type_ids"); len(ss) != 0 {
			requestTypeIDsValue, err := ToInt64Array(ss)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3NoPrefix", "request.request_type_ids"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.RequestTypeIDs = requestTypeIDsValue
		}
		if ss := ctx.QueryArray("request.request_type_names"); len(ss) != 0 {
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.RequestTypeNames = ctx.QueryArray("request.request_type_names")
		}
		if s := ctx.Query("request.name_like"); s != "" {
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.NameLike = ctx.Query("request.name_like")
		}
		if s := ctx.Query("request.current_status"); s != "" {
			currentStatusValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3NoPrefix", "request.current_status"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.CurrentStatus = currentStatusValue
		}
		if s := ctx.Query("request.is_unclosed"); s != "" {
			isUnclosedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3NoPrefix", "request.is_unclosed"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.IsUnclosed.Valid = true
			query.Request.IsUnclosed.Bool = isUnclosedValue
		}
		if s := ctx.Query("request.is_overdued"); s != "" {
			isOverduedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3NoPrefix", "request.is_overdued"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.IsOverdued.Valid = true
			query.Request.IsOverdued.Bool = isOverduedValue
		}
		if s := ctx.Query("request.is_suspend"); s != "" {
			isSuspendValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3NoPrefix", "request.is_suspend"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.IsSuspend.Valid = true
			query.Request.IsSuspend.Bool = isSuspendValue
		}
		if s := ctx.Query("request.start_at"); s != "" {
			startAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3NoPrefix", "request.start_at"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.StartAt = startAtValue
		}
		if s := ctx.Query("request.end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3NoPrefix", "request.end_at"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.EndAt = endAtValue
		}
		if s := ctx.Query("request.overdue_start"); s != "" {
			overdueStartValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3NoPrefix", "request.overdue_start"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.OverdueStart = overdueStartValue
		}
		if s := ctx.Query("request.overdue_end"); s != "" {
			overdueEndValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3NoPrefix", "request.overdue_end"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.Request.OverdueEnd = overdueEndValue
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "request.settings.") {
				continue
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			if query.Request.Settings == nil {
				query.Request.Settings = map[string]string{}
			}
			query.Request.Settings[strings.TrimPrefix(key, "request.settings.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "request.ttargstt.") {
				continue
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			if query.Request.Args == nil {
				query.Request.Args = map[string]string{}
			}
			query.Request.Args[strings.TrimPrefix(key, "request.ttargstt.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "request.") {
				continue
			}
			if key == "request.operator_id" ||
				key == "request.creator_id" ||
				key == "request.requester_id" ||
				key == "request.request_type_ids" ||
				key == "request.request_type_names" ||
				key == "request.name_like" ||
				key == "request.current_status" ||
				key == "request.is_unclosed" ||
				key == "request.is_overdued" ||
				key == "request.is_suspend" ||
				key == "request.start_at" ||
				key == "request.end_at" ||
				key == "request.overdue_start" ||
				key == "request.overdue_end" ||
				strings.HasPrefix(key, "request.settings.") ||
				strings.HasPrefix(key, "request.ttargstt.") {
				continue
			}
			if query == nil {
				query = new(RequestQueryEx3)
			}
			if query.Request.Values == nil {
				query.Request.Values = url.Values{}
			}
			query.Request.Values[strings.TrimPrefix(key, "request.")] = values
		}
		if s := ctx.Query("ex_arg"); s != "" {
			if query == nil {
				query = new(RequestQueryEx3)
			}
			query.ExArg = ctx.Query("ex_arg")
		}
		var offset int64
		if s := ctx.Query("offset"); s != "" {
			offsetValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3NoPrefix", "offset"))
				return
			}
			offset = offsetValue
		}
		var limit int64
		if s := ctx.Query("limit"); s != "" {
			limitValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx3NoPrefix", "limit"))
				return
			}
			limit = limitValue
		}
		var params = map[string]string{}
		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "params.") {
				continue
			}
			params[strings.TrimPrefix(key, "params.")] = values[len(values)-1]
		}
		result, err := svc.QueryEx3NoPrefix(ctx.Request.Context(), query, offset, limit, params)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/requests/queryex4/NoPrefix", func(ctx *gin.Context) {
		var query *RequestQueryEx4
		if s := ctx.Query("request.operator_id"); s != "" {
			operatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4NoPrefix", "request.operator_id"))
				return
			}
			query = new(RequestQueryEx4)
			query.Request = new(models.RequestQuery)
			query.Request.OperatorID = operatorIDValue
		}
		if s := ctx.Query("request.creator_id"); s != "" {
			creatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4NoPrefix", "request.creator_id"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.CreatorID = creatorIDValue
		}
		if s := ctx.Query("request.requester_id"); s != "" {
			requesterIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4NoPrefix", "request.requester_id"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.RequesterID = requesterIDValue
		}
		if ss := ctx.QueryArray("request.request_type_ids"); len(ss) != 0 {
			requestTypeIDsValue, err := ToInt64Array(ss)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4NoPrefix", "request.request_type_ids"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.RequestTypeIDs = requestTypeIDsValue
		}
		if ss := ctx.QueryArray("request.request_type_names"); len(ss) != 0 {
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.RequestTypeNames = ctx.QueryArray("request.request_type_names")
		}
		if s := ctx.Query("request.name_like"); s != "" {
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.NameLike = ctx.Query("request.name_like")
		}
		if s := ctx.Query("request.current_status"); s != "" {
			currentStatusValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4NoPrefix", "request.current_status"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.CurrentStatus = currentStatusValue
		}
		if s := ctx.Query("request.is_unclosed"); s != "" {
			isUnclosedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4NoPrefix", "request.is_unclosed"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.IsUnclosed.Valid = true
			query.Request.IsUnclosed.Bool = isUnclosedValue
		}
		if s := ctx.Query("request.is_overdued"); s != "" {
			isOverduedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4NoPrefix", "request.is_overdued"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.IsOverdued.Valid = true
			query.Request.IsOverdued.Bool = isOverduedValue
		}
		if s := ctx.Query("request.is_suspend"); s != "" {
			isSuspendValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4NoPrefix", "request.is_suspend"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.IsSuspend.Valid = true
			query.Request.IsSuspend.Bool = isSuspendValue
		}
		if s := ctx.Query("request.start_at"); s != "" {
			startAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4NoPrefix", "request.start_at"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.StartAt = startAtValue
		}
		if s := ctx.Query("request.end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4NoPrefix", "request.end_at"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.EndAt = endAtValue
		}
		if s := ctx.Query("request.overdue_start"); s != "" {
			overdueStartValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4NoPrefix", "request.overdue_start"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.OverdueStart = overdueStartValue
		}
		if s := ctx.Query("request.overdue_end"); s != "" {
			overdueEndValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4NoPrefix", "request.overdue_end"))
				return
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			query.Request.OverdueEnd = overdueEndValue
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "request.settings.") {
				continue
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			if query.Request.Settings == nil {
				query.Request.Settings = map[string]string{}
			}
			query.Request.Settings[strings.TrimPrefix(key, "request.settings.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "request.ttargstt.") {
				continue
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			if query.Request.Args == nil {
				query.Request.Args = map[string]string{}
			}
			query.Request.Args[strings.TrimPrefix(key, "request.ttargstt.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "request.") {
				continue
			}
			if key == "request.operator_id" ||
				key == "request.creator_id" ||
				key == "request.requester_id" ||
				key == "request.request_type_ids" ||
				key == "request.request_type_names" ||
				key == "request.name_like" ||
				key == "request.current_status" ||
				key == "request.is_unclosed" ||
				key == "request.is_overdued" ||
				key == "request.is_suspend" ||
				key == "request.start_at" ||
				key == "request.end_at" ||
				key == "request.overdue_start" ||
				key == "request.overdue_end" ||
				strings.HasPrefix(key, "request.settings.") ||
				strings.HasPrefix(key, "request.ttargstt.") {
				continue
			}
			if query == nil {
				query = new(RequestQueryEx4)
			}
			if query.Request == nil {
				query.Request = new(models.RequestQuery)
			}
			if query.Request.Values == nil {
				query.Request.Values = url.Values{}
			}
			query.Request.Values[strings.TrimPrefix(key, "request.")] = values
		}
		if s := ctx.Query("ex_arg"); s != "" {
			if query == nil {
				query = new(RequestQueryEx4)
			}
			query.ExArg = ctx.Query("ex_arg")
		}
		var offset int64
		if s := ctx.Query("offset"); s != "" {
			offsetValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4NoPrefix", "offset"))
				return
			}
			offset = offsetValue
		}
		var limit int64
		if s := ctx.Query("limit"); s != "" {
			limitValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.QueryEx4NoPrefix", "limit"))
				return
			}
			limit = limitValue
		}
		var params = map[string]string{}
		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "params.") {
				continue
			}
			params[strings.TrimPrefix(key, "params.")] = values[len(values)-1]
		}
		result, err := svc.QueryEx4NoPrefix(ctx.Request.Context(), query, offset, limit, params)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/requests", func(ctx *gin.Context) {
		var query *models.RequestQuery
		if s := ctx.Query("query.operator_id"); s != "" {
			operatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.List", "query.operator_id"))
				return
			}
			query = new(models.RequestQuery)
			query.OperatorID = operatorIDValue
		}
		if s := ctx.Query("query.creator_id"); s != "" {
			creatorIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.List", "query.creator_id"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.CreatorID = creatorIDValue
		}
		if s := ctx.Query("query.requester_id"); s != "" {
			requesterIDValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.List", "query.requester_id"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.RequesterID = requesterIDValue
		}
		if ss := ctx.QueryArray("query.request_type_ids"); len(ss) != 0 {
			requestTypeIDsValue, err := ToInt64Array(ss)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.List", "query.request_type_ids"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.RequestTypeIDs = requestTypeIDsValue
		}
		if ss := ctx.QueryArray("query.request_type_names"); len(ss) != 0 {
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.RequestTypeNames = ctx.QueryArray("query.request_type_names")
		}
		if s := ctx.Query("query.name_like"); s != "" {
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.NameLike = ctx.Query("query.name_like")
		}
		if s := ctx.Query("query.current_status"); s != "" {
			currentStatusValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.List", "query.current_status"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.CurrentStatus = currentStatusValue
		}
		if s := ctx.Query("query.is_unclosed"); s != "" {
			isUnclosedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.List", "query.is_unclosed"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.IsUnclosed.Valid = true
			query.IsUnclosed.Bool = isUnclosedValue
		}
		if s := ctx.Query("query.is_overdued"); s != "" {
			isOverduedValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.List", "query.is_overdued"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.IsOverdued.Valid = true
			query.IsOverdued.Bool = isOverduedValue
		}
		if s := ctx.Query("query.is_suspend"); s != "" {
			isSuspendValue, err := strconv.ParseBool(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.List", "query.is_suspend"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.IsSuspend.Valid = true
			query.IsSuspend.Bool = isSuspendValue
		}
		if s := ctx.Query("query.start_at"); s != "" {
			startAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.List", "query.start_at"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.StartAt = startAtValue
		}
		if s := ctx.Query("query.end_at"); s != "" {
			endAtValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.List", "query.end_at"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.EndAt = endAtValue
		}
		if s := ctx.Query("query.overdue_start"); s != "" {
			overdueStartValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.List", "query.overdue_start"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.OverdueStart = overdueStartValue
		}
		if s := ctx.Query("query.overdue_end"); s != "" {
			overdueEndValue, err := ToDatetime(s)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.List", "query.overdue_end"))
				return
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			query.OverdueEnd = overdueEndValue
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "query.settings.") {
				continue
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			if query.Settings == nil {
				query.Settings = map[string]string{}
			}
			query.Settings[strings.TrimPrefix(key, "query.settings.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "query.ttargstt.") {
				continue
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			if query.Args == nil {
				query.Args = map[string]string{}
			}
			query.Args[strings.TrimPrefix(key, "query.ttargstt.")] = values[len(values)-1]
		}

		for key, values := range ctx.Request.URL.Query() {
			if !strings.HasPrefix(key, "query.") {
				continue
			}
			if key == "query.operator_id" ||
				key == "query.creator_id" ||
				key == "query.requester_id" ||
				key == "query.request_type_ids" ||
				key == "query.request_type_names" ||
				key == "query.name_like" ||
				key == "query.current_status" ||
				key == "query.is_unclosed" ||
				key == "query.is_overdued" ||
				key == "query.is_suspend" ||
				key == "query.start_at" ||
				key == "query.end_at" ||
				key == "query.overdue_start" ||
				key == "query.overdue_end" ||
				strings.HasPrefix(key, "query.settings.") ||
				strings.HasPrefix(key, "query.ttargstt.") {
				continue
			}
			if query == nil {
				query = new(models.RequestQuery)
			}
			if query.Values == nil {
				query.Values = url.Values{}
			}
			query.Values[strings.TrimPrefix(key, "query.")] = values
		}
		var offset int64
		if s := ctx.Query("offset"); s != "" {
			offsetValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.List", "offset"))
				return
			}
			offset = offsetValue
		}
		var limit int64
		if s := ctx.Query("limit"); s != "" {
			limitValue, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.List", "limit"))
				return
			}
			limit = limitValue
		}
		result, err := svc.List(ctx.Request.Context(), query, offset, limit)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.POST("/requests/create1", func(ctx *gin.Context) {
		var data models.Request
		if err := ctx.Bind(&data); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Create1", "data"))
			return
		}
		result, err := svc.Create1(ctx.Request.Context(), &data)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.POST("/requests/create2", func(ctx *gin.Context) {
		var bindArgs struct {
			Request *models.Request `json:"request,omitempty"`
			Testarg int64           `json:"testarg,omitempty"`
		}
		if err := ctx.Bind(&bindArgs); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Create2", "bindArgs"))
			return
		}
		result, err := svc.Create2(ctx.Request.Context(), bindArgs.Request, bindArgs.Testarg)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.PUT("/requests/:id", func(ctx *gin.Context) {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.UpdateByID", "id"))
			return
		}
		var data models.Request
		if err := ctx.Bind(&data); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.UpdateByID", "data"))
			return
		}
		result, err := svc.UpdateByID(ctx.Request.Context(), id, &data)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.PATCH("/requests/set1/:id", func(ctx *gin.Context) {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Set1ByID", "id"))
			return
		}
		var bindArgs struct {
			Params map[string]string `json:"params,omitempty"`
		}
		if err := ctx.Bind(&bindArgs); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Set1ByID", "bindArgs"))
			return
		}
		result, err := svc.Set1ByID(ctx.Request.Context(), id, bindArgs.Params)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.PATCH("/requests/set2/:id", func(ctx *gin.Context) {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Set2ByID", "id"))
			return
		}
		var params map[string]string
		if err := ctx.Bind(&params); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Set2ByID", "params"))
			return
		}
		result, err := svc.Set2ByID(ctx.Request.Context(), id, params)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.PUT("/requests/set3/:id", func(ctx *gin.Context) {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Set3ByID", "id"))
			return
		}
		var bindArgs struct {
			Params map[string]string `json:"params,omitempty"`
		}
		if err := ctx.Bind(&bindArgs); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Set3ByID", "bindArgs"))
			return
		}
		result, err := svc.Set3ByID(ctx.Request.Context(), id, bindArgs.Params)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.PUT("/requests/set4/:id", func(ctx *gin.Context) {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Set4ByID", "id"))
			return
		}
		var params map[string]string
		if err := ctx.Bind(&params); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Set4ByID", "params"))
			return
		}
		result, err := svc.Set4ByID(ctx.Request.Context(), id, params)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.POST("/requests/set5/:id", func(ctx *gin.Context) {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Set5ByID", "id"))
			return
		}
		var bindArgs struct {
			Params map[string]string `json:"params,omitempty"`
		}
		if err := ctx.Bind(&bindArgs); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Set5ByID", "bindArgs"))
			return
		}
		result, err := svc.Set5ByID(ctx.Request.Context(), id, bindArgs.Params)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.POST("/requests/set6/:id", func(ctx *gin.Context) {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Set6ByID", "id"))
			return
		}
		var params map[string]string
		if err := ctx.Bind(&params); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Set6ByID", "params"))
			return
		}
		result, err := svc.Set6ByID(ctx.Request.Context(), id, params)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.POST("/requests/set7/:id", func(ctx *gin.Context) {
		id, err := strconv.ParseInt(ctx.Param("id"), 10, 64)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Set7ByID", "id"))
			return
		}
		var params interface{}
		if err := ctx.Bind(&params); err != nil {
			ctx.JSON(http.StatusBadRequest, NewBadArgument(err, "Requests.Set7ByID", "params"))
			return
		}
		result, err := svc.Set7ByID(ctx.Request.Context(), id, params)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusCreated, result)
		return
	})
	mux.GET("/requests/querysub1", func(ctx *gin.Context) {
		var query *SubTest1
		if s := ctx.Query("query.sub1.a1"); s != "" {
			query = new(SubTest1)
			query.Sub1.A1 = ctx.Query("query.sub1.a1")
		}
		if s := ctx.Query("query.sub1.a2"); s != "" {
			if query == nil {
				query = new(SubTest1)
			}
			query.Sub1.A2 = ctx.Query("query.sub1.a2")
		}
		if s := ctx.Query("query.sub2.b1"); s != "" {
			if query == nil {
				query = new(SubTest1)
			}
			query.Sub2.B1 = ctx.Query("query.sub2.b1")
		}
		if s := ctx.Query("query.sub2.b2"); s != "" {
			if query == nil {
				query = new(SubTest1)
			}
			query.Sub2.B2 = ctx.Query("query.sub2.b2")
		}
		if s := ctx.Query("query.ex_arg"); s != "" {
			if query == nil {
				query = new(SubTest1)
			}
			query.ExArg = ctx.Query("query.ex_arg")
		}
		result, err := svc.QuerySubTest1(ctx.Request.Context(), query)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/requests/querysub2", func(ctx *gin.Context) {
		var query *SubTest2
		if s := ctx.Query("query.sub1.a1"); s != "" {
			query = new(SubTest2)
			query.Sub1 = new(Sub1)
			query.Sub1.A1 = ctx.Query("query.sub1.a1")
		}
		if s := ctx.Query("query.sub1.a2"); s != "" {
			if query == nil {
				query = new(SubTest2)
			}
			if query.Sub1 == nil {
				query.Sub1 = new(Sub1)
			}
			query.Sub1.A2 = ctx.Query("query.sub1.a2")
		}
		if s := ctx.Query("query.sub2.b1"); s != "" {
			if query == nil {
				query = new(SubTest2)
			}
			query.Sub2 = new(Sub2)
			query.Sub2.B1 = ctx.Query("query.sub2.b1")
		}
		if s := ctx.Query("query.sub2.b2"); s != "" {
			if query == nil {
				query = new(SubTest2)
			}
			if query.Sub2 == nil {
				query.Sub2 = new(Sub2)
			}
			query.Sub2.B2 = ctx.Query("query.sub2.b2")
		}
		if s := ctx.Query("query.ex_arg"); s != "" {
			if query == nil {
				query = new(SubTest2)
			}
			query.ExArg = ctx.Query("query.ex_arg")
		}
		result, err := svc.QuerySubTest2(ctx.Request.Context(), query)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/requests/querysub3", func(ctx *gin.Context) {
		var query *SubTest3
		if s := ctx.Query("query.ex_arg"); s != "" {
			query = new(SubTest3)
			query.ExArg = ctx.Query("query.ex_arg")
		}
		if s := ctx.Query("query.sub1.a1"); s != "" {
			if query == nil {
				query = new(SubTest3)
			}
			query.SubTest2.Sub1 = new(Sub1)
			query.SubTest2.Sub1.A1 = ctx.Query("query.sub1.a1")
		}
		if s := ctx.Query("query.sub1.a2"); s != "" {
			if query == nil {
				query = new(SubTest3)
			}
			if query.SubTest2.Sub1 == nil {
				query.SubTest2.Sub1 = new(Sub1)
			}
			query.SubTest2.Sub1.A2 = ctx.Query("query.sub1.a2")
		}
		if s := ctx.Query("query.sub2.b1"); s != "" {
			if query == nil {
				query = new(SubTest3)
			}
			query.SubTest2.Sub2 = new(Sub2)
			query.SubTest2.Sub2.B1 = ctx.Query("query.sub2.b1")
		}
		if s := ctx.Query("query.sub2.b2"); s != "" {
			if query == nil {
				query = new(SubTest3)
			}
			if query.SubTest2.Sub2 == nil {
				query.SubTest2.Sub2 = new(Sub2)
			}
			query.SubTest2.Sub2.B2 = ctx.Query("query.sub2.b2")
		}
		if s := ctx.Query("query.ex_arg"); s != "" {
			if query == nil {
				query = new(SubTest3)
			}
			query.SubTest2.ExArg = ctx.Query("query.ex_arg")
		}
		result, err := svc.QuerySubTest3(ctx.Request.Context(), query)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
	mux.GET("/requests/querysub4", func(ctx *gin.Context) {
		var query *SubTest4
		if s := ctx.Query("query.ex_arg"); s != "" {
			query = new(SubTest4)
			query.ExArg = ctx.Query("query.ex_arg")
		}
		if s := ctx.Query("query.sub1.a1"); s != "" {
			if query == nil {
				query = new(SubTest4)
			}
			query.SubTest2 = new(SubTest2)
			query.SubTest2.Sub1 = new(Sub1)
			query.SubTest2.Sub1.A1 = ctx.Query("query.sub1.a1")
		}
		if s := ctx.Query("query.sub1.a2"); s != "" {
			if query == nil {
				query = new(SubTest4)
			}
			if query.SubTest2 == nil {
				query.SubTest2 = new(SubTest2)
			}
			if query.SubTest2.Sub1 == nil {
				query.SubTest2.Sub1 = new(Sub1)
			}
			query.SubTest2.Sub1.A2 = ctx.Query("query.sub1.a2")
		}
		if s := ctx.Query("query.sub2.b1"); s != "" {
			if query == nil {
				query = new(SubTest4)
			}
			if query.SubTest2 == nil {
				query.SubTest2 = new(SubTest2)
			}
			query.SubTest2.Sub2 = new(Sub2)
			query.SubTest2.Sub2.B1 = ctx.Query("query.sub2.b1")
		}
		if s := ctx.Query("query.sub2.b2"); s != "" {
			if query == nil {
				query = new(SubTest4)
			}
			if query.SubTest2 == nil {
				query.SubTest2 = new(SubTest2)
			}
			if query.SubTest2.Sub2 == nil {
				query.SubTest2.Sub2 = new(Sub2)
			}
			query.SubTest2.Sub2.B2 = ctx.Query("query.sub2.b2")
		}
		if s := ctx.Query("query.ex_arg"); s != "" {
			if query == nil {
				query = new(SubTest4)
			}
			if query.SubTest2 == nil {
				query.SubTest2 = new(SubTest2)
			}
			query.SubTest2.ExArg = ctx.Query("query.ex_arg")
		}
		result, err := svc.QuerySubTest4(ctx.Request.Context(), query)
		if err != nil {
			ctx.JSON(httpCodeWith(err), err)
			return
		}
		ctx.JSON(http.StatusOK, result)
		return
	})
}
